!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){e.exports={test:"_3GZ-_Oit-8MoPrYSDj8ulh"}},,function(e,t,n){"use strict";n.r(t);var o=function(){},r={},i=[],a=[];function l(e,t){var n,l,u,s,c=a;for(s=arguments.length;s-- >2;)i.push(arguments[s]);for(t&&null!=t.children&&(i.length||i.push(t.children),delete t.children);i.length;)if((l=i.pop())&&void 0!==l.pop)for(s=l.length;s--;)i.push(l[s]);else"boolean"==typeof l&&(l=null),(u="function"!=typeof e)&&(null==l?l="":"number"==typeof l?l=String(l):"string"!=typeof l&&(u=!1)),u&&n?c[c.length-1]+=l:c===a?c=[l]:c.push(l),n=u;var p=new o;return p.nodeName=e,p.children=c,p.attributes=null==t?void 0:t,p.key=null==t?void 0:t.key,void 0!==r.vnode&&r.vnode(p),p}function u(e,t){for(var n in t)e[n]=t[n];return e}var s="function"==typeof Promise?Promise.resolve().then.bind(Promise.resolve()):setTimeout;var c=/acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i,p=[];function f(e){!e._dirty&&(e._dirty=!0)&&1==p.push(e)&&(r.debounceRendering||s)(d)}function d(){var e,t=p;for(p=[];e=t.pop();)e._dirty&&L(e)}function v(e,t,n){return"string"==typeof t||"number"==typeof t?void 0!==e.splitText:"string"==typeof t.nodeName?!e._componentConstructor&&_(e,t.nodeName):n||e._componentConstructor===t.nodeName}function _(e,t){return e.normalizedNodeName===t||e.nodeName.toLowerCase()===t.toLowerCase()}function m(e){var t=u({},e.attributes);t.children=e.children;var n=e.nodeName.defaultProps;if(void 0!==n)for(var o in n)void 0===t[o]&&(t[o]=n[o]);return t}function h(e){var t=e.parentNode;t&&t.removeChild(e)}function y(e,t,n,o,r){if("className"===t&&(t="class"),"key"===t);else if("ref"===t)n&&n(null),o&&o(e);else if("class"!==t||r)if("style"===t){if(o&&"string"!=typeof o&&"string"!=typeof n||(e.style.cssText=o||""),o&&"object"==typeof o){if("string"!=typeof n)for(var i in n)i in o||(e.style[i]="");for(var i in o)e.style[i]="number"==typeof o[i]&&!1===c.test(i)?o[i]+"px":o[i]}}else if("dangerouslySetInnerHTML"===t)o&&(e.innerHTML=o.__html||"");else if("o"==t[0]&&"n"==t[1]){var a=t!==(t=t.replace(/Capture$/,""));t=t.toLowerCase().substring(2),o?n||e.addEventListener(t,b,a):e.removeEventListener(t,b,a),(e._listeners||(e._listeners={}))[t]=o}else if("list"!==t&&"type"!==t&&!r&&t in e){try{e[t]=null==o?"":o}catch(e){}null!=o&&!1!==o||"spellcheck"==t||e.removeAttribute(t)}else{var l=r&&t!==(t=t.replace(/^xlink:?/,""));null==o||!1===o?l?e.removeAttributeNS("http://www.w3.org/1999/xlink",t.toLowerCase()):e.removeAttribute(t):"function"!=typeof o&&(l?e.setAttributeNS("http://www.w3.org/1999/xlink",t.toLowerCase(),o):e.setAttribute(t,o))}else e.className=o||""}function b(e){return this._listeners[e.type](r.event&&r.event(e)||e)}var g=[],x=0,C=!1,N=!1;function w(){for(var e;e=g.pop();)r.afterMount&&r.afterMount(e),e.componentDidMount&&e.componentDidMount()}function S(e,t,n,o,r,i){x++||(C=null!=r&&void 0!==r.ownerSVGElement,N=null!=e&&!("__preactattr_"in e));var a=k(e,t,n,o,i);return r&&a.parentNode!==r&&r.appendChild(a),--x||(N=!1,i||w()),a}function k(e,t,n,o,r){var i=e,a=C;if(null!=t&&"boolean"!=typeof t||(t=""),"string"==typeof t||"number"==typeof t)return e&&void 0!==e.splitText&&e.parentNode&&(!e._component||r)?e.nodeValue!=t&&(e.nodeValue=t):(i=document.createTextNode(t),e&&(e.parentNode&&e.parentNode.replaceChild(i,e),P(e,!0))),i.__preactattr_=!0,i;var l=t.nodeName;if("function"==typeof l)return function(e,t,n,o){var r=e&&e._component,i=r,a=e,l=r&&e._componentConstructor===t.nodeName,u=l,s=m(t);for(;r&&!u&&(r=r._parentComponent);)u=r.constructor===t.nodeName;r&&u&&(!o||r._component)?(j(r,s,3,n,o),e=r.base):(i&&!l&&(O(i),e=a=null),r=T(t.nodeName,s,n),e&&!r.nextBase&&(r.nextBase=e,a=null),j(r,s,1,n,o),e=r.base,a&&e!==a&&(a._component=null,P(a,!1)));return e}(e,t,n,o);if(C="svg"===l||"foreignObject"!==l&&C,l=String(l),(!e||!_(e,l))&&(i=function(e,t){var n=t?document.createElementNS("http://www.w3.org/2000/svg",e):document.createElement(e);return n.normalizedNodeName=e,n}(l,C),e)){for(;e.firstChild;)i.appendChild(e.firstChild);e.parentNode&&e.parentNode.replaceChild(i,e),P(e,!0)}var u=i.firstChild,s=i.__preactattr_,c=t.children;if(null==s){s=i.__preactattr_={};for(var p=i.attributes,f=p.length;f--;)s[p[f].name]=p[f].value}return!N&&c&&1===c.length&&"string"==typeof c[0]&&null!=u&&void 0!==u.splitText&&null==u.nextSibling?u.nodeValue!=c[0]&&(u.nodeValue=c[0]):(c&&c.length||null!=u)&&function(e,t,n,o,r){var i,a,l,u,s,c=e.childNodes,p=[],f={},d=0,_=0,m=c.length,y=0,b=t?t.length:0;if(0!==m)for(var g=0;g<m;g++){var x=c[g],C=x.__preactattr_,N=b&&C?x._component?x._component.__key:C.key:null;null!=N?(d++,f[N]=x):(C||(void 0!==x.splitText?!r||x.nodeValue.trim():r))&&(p[y++]=x)}if(0!==b)for(var g=0;g<b;g++){u=t[g],s=null;var N=u.key;if(null!=N)d&&void 0!==f[N]&&(s=f[N],f[N]=void 0,d--);else if(_<y)for(i=_;i<y;i++)if(void 0!==p[i]&&v(a=p[i],u,r)){s=a,p[i]=void 0,i===y-1&&y--,i===_&&_++;break}s=k(s,u,n,o),l=c[g],s&&s!==e&&s!==l&&(null==l?e.appendChild(s):s===l.nextSibling?h(l):e.insertBefore(s,l))}if(d)for(var g in f)void 0!==f[g]&&P(f[g],!1);for(;_<=y;)void 0!==(s=p[y--])&&P(s,!1)}(i,c,n,o,N||null!=s.dangerouslySetInnerHTML),function(e,t,n){var o;for(o in n)t&&null!=t[o]||null==n[o]||y(e,o,n[o],n[o]=void 0,C);for(o in t)"children"===o||"innerHTML"===o||o in n&&t[o]===("value"===o||"checked"===o?e[o]:n[o])||y(e,o,n[o],n[o]=t[o],C)}(i,t.attributes,s),C=a,i}function P(e,t){var n=e._component;n?O(n):(null!=e.__preactattr_&&e.__preactattr_.ref&&e.__preactattr_.ref(null),!1!==t&&null!=e.__preactattr_||h(e),U(e))}function U(e){for(e=e.lastChild;e;){var t=e.previousSibling;P(e,!0),e=t}}var M=[];function T(e,t,n){var o,r=M.length;for(e.prototype&&e.prototype.render?(o=new e(t,n),D.call(o,t,n)):((o=new D(t,n)).constructor=e,o.render=B);r--;)if(M[r].constructor===e)return o.nextBase=M[r].nextBase,M.splice(r,1),o;return o}function B(e,t,n){return this.constructor(e,n)}function j(e,t,n,o,i){e._disable||(e._disable=!0,e.__ref=t.ref,e.__key=t.key,delete t.ref,delete t.key,void 0===e.constructor.getDerivedStateFromProps&&(!e.base||i?e.componentWillMount&&e.componentWillMount():e.componentWillReceiveProps&&e.componentWillReceiveProps(t,o)),o&&o!==e.context&&(e.prevContext||(e.prevContext=e.context),e.context=o),e.prevProps||(e.prevProps=e.props),e.props=t,e._disable=!1,0!==n&&(1!==n&&!1===r.syncComponentUpdates&&e.base?f(e):L(e,1,i)),e.__ref&&e.__ref(e))}function L(e,t,n,o){if(!e._disable){var i,a,l,s=e.props,c=e.state,p=e.context,f=e.prevProps||s,d=e.prevState||c,v=e.prevContext||p,_=e.base,h=e.nextBase,y=_||h,b=e._component,C=!1,N=v;if(e.constructor.getDerivedStateFromProps&&(c=u(u({},c),e.constructor.getDerivedStateFromProps(s,c)),e.state=c),_&&(e.props=f,e.state=d,e.context=v,2!==t&&e.shouldComponentUpdate&&!1===e.shouldComponentUpdate(s,c,p)?C=!0:e.componentWillUpdate&&e.componentWillUpdate(s,c,p),e.props=s,e.state=c,e.context=p),e.prevProps=e.prevState=e.prevContext=e.nextBase=null,e._dirty=!1,!C){i=e.render(s,c,p),e.getChildContext&&(p=u(u({},p),e.getChildContext())),_&&e.getSnapshotBeforeUpdate&&(N=e.getSnapshotBeforeUpdate(f,d));var k,U,M=i&&i.nodeName;if("function"==typeof M){var B=m(i);(a=b)&&a.constructor===M&&B.key==a.__key?j(a,B,1,p,!1):(k=a,e._component=a=T(M,B,p),a.nextBase=a.nextBase||h,a._parentComponent=e,j(a,B,0,p,!1),L(a,1,n,!0)),U=a.base}else l=y,(k=b)&&(l=e._component=null),(y||1===t)&&(l&&(l._component=null),U=S(l,i,p,n||!_,y&&y.parentNode,!0));if(y&&U!==y&&a!==b){var D=y.parentNode;D&&U!==D&&(D.replaceChild(U,y),k||(y._component=null,P(y,!1)))}if(k&&O(k),e.base=U,U&&!o){for(var W=e,A=e;A=A._parentComponent;)(W=A).base=U;U._component=W,U._componentConstructor=W.constructor}}for(!_||n?g.unshift(e):C||(e.componentDidUpdate&&e.componentDidUpdate(f,d,N),r.afterUpdate&&r.afterUpdate(e));e._renderCallbacks.length;)e._renderCallbacks.pop().call(e);x||o||w()}}function O(e){r.beforeUnmount&&r.beforeUnmount(e);var t=e.base;e._disable=!0,e.componentWillUnmount&&e.componentWillUnmount(),e.base=null;var n=e._component;n?O(n):t&&(t.__preactattr_&&t.__preactattr_.ref&&t.__preactattr_.ref(null),e.nextBase=t,h(t),M.push(e),U(t)),e.__ref&&e.__ref(null)}function D(e,t){this._dirty=!0,this.context=t,this.props=e,this.state=this.state||{},this._renderCallbacks=[]}function W(e,t,n){return S(n,e,{},!1,t,!1)}u(D.prototype,{setState:function(e,t){this.prevState||(this.prevState=this.state),this.state=u(u({},this.state),"function"==typeof e?e(this.state,this.props):e),t&&this._renderCallbacks.push(t),f(this)},forceUpdate:function(e){e&&this._renderCallbacks.push(e),L(this,2)},render:function(){}});var A=function(e,t,n,o){return new(n||(n=Promise))(function(r,i){function a(e){try{u(o.next(e))}catch(e){i(e)}}function l(e){try{u(o.throw(e))}catch(e){i(e)}}function u(e){e.done?r(e.value):new n(function(t){t(e.value)}).then(a,l)}u((o=o.apply(e,t||[])).next())})};var E=function(e,t,n,o){return new(n||(n=Promise))(function(r,i){function a(e){try{u(o.next(e))}catch(e){i(e)}}function l(e){try{u(o.throw(e))}catch(e){i(e)}}function u(e){e.done?r(e.value):new n(function(t){t(e.value)}).then(a,l)}u((o=o.apply(e,t||[])).next())})};var V=n(0);(function(e){return E(this,void 0,void 0,function*(){return(yield function(e,t){return A(this,void 0,void 0,function*(){return yield(yield fetch("/graphql",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({query:e,variables:t})})).json()})}("\n    query getBook($id: ID!) {\n        book(id: $id) {\n            id\n            alternate_series\n            authors\n            chapter\n            community_rating\n            created_at\n            current_page\n            date_released\n            file\n            genres\n            last_page_read\n            pages {\n                file_number\n                type\n                url\n            }\n            rating\n            read\n            reading_direction\n            series\n            story_arc\n            summary\n            title\n            type\n            updated_at\n            volume\n            web\n        }\n    }      \n    ",{id:e})).data.book})})("cb58f0e6-353d-43c1-9862-59fe43a572ce").then(e=>console.log(e)),console.log(V.test),W(l("div",{class:V.test},"test"),document.getElementById("app"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,