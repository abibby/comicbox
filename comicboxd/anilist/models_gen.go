// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package anilist

import (
	"fmt"
	"io"
	"strconv"
)

// Activity union type
type ActivityUnion interface {
	IsActivityUnion()
}

// Likeable union type
type LikeableUnion interface {
	IsLikeableUnion()
}

// Notification union type
type NotificationUnion interface {
	IsNotificationUnion()
}

// Notification for when a activity is liked
type ActivityLikeNotification struct {
	// The id of the Notification
	ID int `json:"id"`
	// The id of the user who liked to the activity
	UserID int `json:"userId"`
	// The type of notification
	Type *NotificationType `json:"type"`
	// The id of the activity which was liked
	ActivityID int `json:"activityId"`
	// The notification context text
	Context *string `json:"context"`
	// The time the notification was created at
	CreatedAt *int `json:"createdAt"`
	// The liked activity
	Activity ActivityUnion `json:"activity"`
	// The user who liked the activity
	User *User `json:"user"`
}

func (ActivityLikeNotification) IsNotificationUnion() {}

// Notification for when authenticated user is @ mentioned in activity or reply
type ActivityMentionNotification struct {
	// The id of the Notification
	ID int `json:"id"`
	// The id of the user who mentioned the authenticated user
	UserID int `json:"userId"`
	// The type of notification
	Type *NotificationType `json:"type"`
	// The id of the activity where mentioned
	ActivityID int `json:"activityId"`
	// The notification context text
	Context *string `json:"context"`
	// The time the notification was created at
	CreatedAt *int `json:"createdAt"`
	// The liked activity
	Activity ActivityUnion `json:"activity"`
	// The user who mentioned the authenticated user
	User *User `json:"user"`
}

func (ActivityMentionNotification) IsNotificationUnion() {}

// Notification for when a user is send an activity message
type ActivityMessageNotification struct {
	// The id of the Notification
	ID int `json:"id"`
	// The if of the user who send the message
	UserID int `json:"userId"`
	// The type of notification
	Type *NotificationType `json:"type"`
	// The id of the activity message
	ActivityID int `json:"activityId"`
	// The notification context text
	Context *string `json:"context"`
	// The time the notification was created at
	CreatedAt *int `json:"createdAt"`
	// The message activity
	Message *MessageActivity `json:"message"`
	// The user who sent the message
	User *User `json:"user"`
}

func (ActivityMessageNotification) IsNotificationUnion() {}

// Replay to an activity item
type ActivityReply struct {
	// The id of the reply
	ID int `json:"id"`
	// The id of the replies creator
	UserID *int `json:"userId"`
	// The id of the parent activity
	ActivityID *int `json:"activityId"`
	// The reply text
	Text *string `json:"text"`
	// The amount of likes the reply has
	LikeCount int `json:"likeCount"`
	// If the currently authenticated user liked the reply
	IsLiked *bool `json:"isLiked"`
	// The time the reply was created at
	CreatedAt int `json:"createdAt"`
	// The user who created reply
	User *User `json:"user"`
	// The users who liked the reply
	Likes []*User `json:"likes"`
}

func (ActivityReply) IsLikeableUnion() {}

// Notification for when a activity reply is liked
type ActivityReplyLikeNotification struct {
	// The id of the Notification
	ID int `json:"id"`
	// The id of the user who liked to the activity reply
	UserID int `json:"userId"`
	// The type of notification
	Type *NotificationType `json:"type"`
	// The id of the activity where the reply which was liked
	ActivityID int `json:"activityId"`
	// The notification context text
	Context *string `json:"context"`
	// The time the notification was created at
	CreatedAt *int `json:"createdAt"`
	// The liked activity
	Activity ActivityUnion `json:"activity"`
	// The user who liked the activity reply
	User *User `json:"user"`
}

func (ActivityReplyLikeNotification) IsNotificationUnion() {}

// Notification for when a user replies to the authenticated users activity
type ActivityReplyNotification struct {
	// The id of the Notification
	ID int `json:"id"`
	// The id of the user who replied to the activity
	UserID int `json:"userId"`
	// The type of notification
	Type *NotificationType `json:"type"`
	// The id of the activity which was replied too
	ActivityID int `json:"activityId"`
	// The notification context text
	Context *string `json:"context"`
	// The time the notification was created at
	CreatedAt *int `json:"createdAt"`
	// The liked activity
	Activity ActivityUnion `json:"activity"`
	// The user who replied to the activity
	User *User `json:"user"`
}

func (ActivityReplyNotification) IsNotificationUnion() {}

// Notification for when a user replies to activity the authenticated user has replied to
type ActivityReplySubscribedNotification struct {
	// The id of the Notification
	ID int `json:"id"`
	// The id of the user who replied to the activity
	UserID int `json:"userId"`
	// The type of notification
	Type *NotificationType `json:"type"`
	// The id of the activity which was replied too
	ActivityID int `json:"activityId"`
	// The notification context text
	Context *string `json:"context"`
	// The time the notification was created at
	CreatedAt *int `json:"createdAt"`
	// The liked activity
	Activity ActivityUnion `json:"activity"`
	// The user who replied to the activity
	User *User `json:"user"`
}

func (ActivityReplySubscribedNotification) IsNotificationUnion() {}

// Notification for when an episode of anime airs
type AiringNotification struct {
	// The id of the Notification
	ID int `json:"id"`
	// The type of notification
	Type *NotificationType `json:"type"`
	// The id of the aired anime
	AnimeID int `json:"animeId"`
	// The episode number that just aired
	Episode int `json:"episode"`
	// The notification context text
	Contexts []*string `json:"contexts"`
	// The time the notification was created at
	CreatedAt *int `json:"createdAt"`
	// The associated media of the airing schedule
	Media *Media `json:"media"`
}

func (AiringNotification) IsNotificationUnion() {}

// Score & Watcher stats for airing anime by episode and mid-week
type AiringProgression struct {
	// The episode the stats were recorded at. .5 is the mid point between 2 episodes airing dates.
	Episode *float64 `json:"episode"`
	// The average score for the media
	Score *float64 `json:"score"`
	// The amount of users watching the anime
	Watching *int `json:"watching"`
}

// Media Airing Schedule
type AiringSchedule struct {
	// The id of the airing schedule item
	ID int `json:"id"`
	// The time the episode airs at
	AiringAt int `json:"airingAt"`
	// Seconds until episode starts airing
	TimeUntilAiring int `json:"timeUntilAiring"`
	// The airing episode number
	Episode int `json:"episode"`
	// The associate media id of the airing episode
	MediaID int `json:"mediaId"`
	// The associate media of the airing episode
	Media *Media `json:"media"`
}

type AiringScheduleConnection struct {
	Edges []*AiringScheduleEdge `json:"edges"`
	Nodes []*AiringSchedule     `json:"nodes"`
	// The pagination information
	PageInfo *PageInfo `json:"pageInfo"`
}

// AiringSchedule connection edge
type AiringScheduleEdge struct {
	Node *AiringSchedule `json:"node"`
	// The id of the connection
	ID *int `json:"id"`
}

type AiringScheduleInput struct {
	AiringAt        *int `json:"airingAt"`
	Episode         *int `json:"episode"`
	TimeUntilAiring *int `json:"timeUntilAiring"`
}

type AniChartHighlightInput struct {
	MediaID   *int    `json:"mediaId"`
	Highlight *string `json:"highlight"`
}

type AniChartUser struct {
	User       *User   `json:"user"`
	Settings   *string `json:"settings"`
	Highlights *string `json:"highlights"`
}

// A character that features in an anime or manga
type Character struct {
	// The id of the character
	ID int `json:"id"`
	// The names of the character
	Name *CharacterName `json:"name"`
	// Character images
	Image *CharacterImage `json:"image"`
	// A general description of the character
	Description *string `json:"description"`
	// If the character is marked as favourite by the currently authenticated user
	IsFavourite bool `json:"isFavourite"`
	// The url for the character page on the AniList website
	SiteURL *string `json:"siteUrl"`
	// Media that includes the character
	Media     *MediaConnection `json:"media"`
	UpdatedAt *int             `json:"updatedAt"`
	// The amount of user's who have favourited the character
	Favourites *int `json:"favourites"`
	// Notes for site moderators
	ModNotes *string `json:"modNotes"`
}

type CharacterConnection struct {
	Edges []*CharacterEdge `json:"edges"`
	Nodes []*Character     `json:"nodes"`
	// The pagination information
	PageInfo *PageInfo `json:"pageInfo"`
}

// Character connection edge
type CharacterEdge struct {
	Node *Character `json:"node"`
	// The id of the connection
	ID *int `json:"id"`
	// The characters role in the media
	Role *CharacterRole `json:"role"`
	// The voice actors of the character
	VoiceActors []*Staff `json:"voiceActors"`
	// The media the character is in
	Media []*Media `json:"media"`
	// The order the character should be displayed from the users favourites
	FavouriteOrder *int `json:"favouriteOrder"`
}

type CharacterImage struct {
	// The character's image of media at its largest size
	Large *string `json:"large"`
	// The character's image of media at medium size
	Medium *string `json:"medium"`
}

// The names of the character
type CharacterName struct {
	// The character's given name
	First *string `json:"first"`
	// The character's surname
	Last *string `json:"last"`
	// The character's full name
	Full *string `json:"full"`
	// The character's full name in their native language
	Native *string `json:"native"`
	// Other names the character might be referred to as
	Alternative []*string `json:"alternative"`
}

// The names of the character
type CharacterNameInput struct {
	// The character's given name
	First *string `json:"first"`
	// The character's surname
	Last *string `json:"last"`
	// The character's full name in their native language
	Native *string `json:"native"`
	// Other names the character might be referred by
	Alternative []*string `json:"alternative"`
}

// A submission for a character that features in an anime or manga
type CharacterSubmission struct {
	// The id of the submission
	ID int `json:"id"`
	// Character that the submission is referencing
	Character *Character `json:"character"`
	// The character submission changes
	Submission *Character `json:"submission"`
	// Submitter for the submission
	Submitter *User `json:"submitter"`
	// Status of the submission
	Status *SubmissionStatus `json:"status"`
	// Inner details of submission status
	Notes     *string `json:"notes"`
	Source    *string `json:"source"`
	CreatedAt *int    `json:"createdAt"`
}

type CharacterSubmissionConnection struct {
	Edges []*CharacterSubmissionEdge `json:"edges"`
	Nodes []*CharacterSubmission     `json:"nodes"`
	// The pagination information
	PageInfo *PageInfo `json:"pageInfo"`
}

// CharacterSubmission connection edge
type CharacterSubmissionEdge struct {
	Node *CharacterSubmission `json:"node"`
	// The characters role in the media
	Role *CharacterRole `json:"role"`
	// The voice actors of the character
	VoiceActors []*Staff `json:"voiceActors"`
	// The submitted voice actors of the character
	SubmittedVoiceActors []*StaffSubmission `json:"submittedVoiceActors"`
}

// Deleted data type
type Deleted struct {
	// If an item has been successfully deleted
	Deleted *bool `json:"deleted"`
}

// User's favourite anime, manga, characters, staff & studios
type Favourites struct {
	// Favourite anime
	Anime *MediaConnection `json:"anime"`
	// Favourite manga
	Manga *MediaConnection `json:"manga"`
	// Favourite characters
	Characters *CharacterConnection `json:"characters"`
	// Favourite staff
	Staff *StaffConnection `json:"staff"`
	// Favourite studios
	Studios *StudioConnection `json:"studios"`
}

// Notification for when the authenticated user is followed by another user
type FollowingNotification struct {
	// The id of the Notification
	ID int `json:"id"`
	// The id of the user who followed the authenticated user
	UserID int `json:"userId"`
	// The type of notification
	Type *NotificationType `json:"type"`
	// The notification context text
	Context *string `json:"context"`
	// The time the notification was created at
	CreatedAt *int `json:"createdAt"`
	// The liked activity
	User *User `json:"user"`
}

func (FollowingNotification) IsNotificationUnion() {}

// User's format statistics
type FormatStats struct {
	Format *MediaFormat `json:"format"`
	Amount *int         `json:"amount"`
}

// Date object that allows for incomplete date values (fuzzy)
type FuzzyDate struct {
	// Numeric Year (2017)
	Year *int `json:"year"`
	// Numeric Month (3)
	Month *int `json:"month"`
	// Numeric Day (24)
	Day *int `json:"day"`
}

// Date object that allows for incomplete date values (fuzzy)
type FuzzyDateInput struct {
	// Numeric Year (2017)
	Year *int `json:"year"`
	// Numeric Month (3)
	Month *int `json:"month"`
	// Numeric Day (24)
	Day *int `json:"day"`
}

// User's genre statistics
type GenreStats struct {
	Genre     *string `json:"genre"`
	Amount    *int    `json:"amount"`
	MeanScore *int    `json:"meanScore"`
	// The amount of time in minutes the genre has been watched by the user
	TimeWatched *int `json:"timeWatched"`
}

// Page of data (Used for internal use only)
type InternalPage struct {
	MediaSubmissions     []*MediaSubmission     `json:"mediaSubmissions"`
	CharacterSubmissions []*CharacterSubmission `json:"characterSubmissions"`
	StaffSubmissions     []*StaffSubmission     `json:"staffSubmissions"`
	RevisionHistory      []*RevisionHistory     `json:"revisionHistory"`
	Reports              []*Report              `json:"reports"`
	ModActions           []*ModAction           `json:"modActions"`
	// The pagination information
	PageInfo        *PageInfo           `json:"pageInfo"`
	Users           []*User             `json:"users"`
	Media           []*Media            `json:"media"`
	Characters      []*Character        `json:"characters"`
	Staff           []*Staff            `json:"staff"`
	Studios         []*Studio           `json:"studios"`
	MediaList       []*MediaList        `json:"mediaList"`
	AiringSchedules []*AiringSchedule   `json:"airingSchedules"`
	MediaTrends     []*MediaTrend       `json:"mediaTrends"`
	Notifications   []NotificationUnion `json:"notifications"`
	Followers       []*User             `json:"followers"`
	Following       []*User             `json:"following"`
	Activities      []ActivityUnion     `json:"activities"`
	ActivityReplies []*ActivityReply    `json:"activityReplies"`
	Threads         []*Thread           `json:"threads"`
	ThreadComments  []*ThreadComment    `json:"threadComments"`
	Reviews         []*Review           `json:"reviews"`
	Recommendations []*Recommendation   `json:"recommendations"`
	Likes           []*User             `json:"likes"`
}

// User list activity (anime & manga updates)
type ListActivity struct {
	// The id of the activity
	ID int `json:"id"`
	// The user id of the activity's creator
	UserID *int `json:"userId"`
	// The type of activity
	Type *ActivityType `json:"type"`
	// The number of activity replies
	ReplyCount int `json:"replyCount"`
	// The list item's textual status
	Status *string `json:"status"`
	// The list progress made
	Progress *string `json:"progress"`
	// If the activity is locked and can receive replies
	IsLocked *bool `json:"isLocked"`
	// If the currently authenticated user is subscribed to the activity
	IsSubscribed *bool `json:"isSubscribed"`
	// The amount of likes the activity has
	LikeCount int `json:"likeCount"`
	// If the currently authenticated user liked the activity
	IsLiked *bool `json:"isLiked"`
	// The url for the activity page on the AniList website
	SiteURL *string `json:"siteUrl"`
	// The time the activity was created at
	CreatedAt int `json:"createdAt"`
	// The owner of the activity
	User *User `json:"user"`
	// The associated media to the activity update
	Media *Media `json:"media"`
	// The written replies to the activity
	Replies []*ActivityReply `json:"replies"`
	// The users who liked the activity
	Likes []*User `json:"likes"`
}

func (ListActivity) IsLikeableUnion() {}
func (ListActivity) IsActivityUnion() {}

// User's list score statistics
type ListScoreStats struct {
	MeanScore         *int `json:"meanScore"`
	StandardDeviation *int `json:"standardDeviation"`
}

// Anime or Manga
type Media struct {
	// The id of the media
	ID int `json:"id"`
	// The mal id of the media
	IDMal *int `json:"idMal"`
	// The official titles of the media in various languages
	Title *MediaTitle `json:"title"`
	// The type of the media; anime or manga
	Type *MediaType `json:"type"`
	// The format the media was released in
	Format *MediaFormat `json:"format"`
	// The current releasing status of the media
	Status *MediaStatus `json:"status"`
	// Short description of the media's story and characters
	Description *string `json:"description"`
	// The first official release date of the media
	StartDate *FuzzyDate `json:"startDate"`
	// The last official release date of the media
	EndDate *FuzzyDate `json:"endDate"`
	// The season the media was initially released in
	Season *MediaSeason `json:"season"`
	// The season year the media was initially released in
	SeasonYear *int `json:"seasonYear"`
	// The year & season the media was initially released in
	SeasonInt *int `json:"seasonInt"`
	// The amount of episodes the anime has when complete
	Episodes *int `json:"episodes"`
	// The general length of each anime episode in minutes
	Duration *int `json:"duration"`
	// The amount of chapters the manga has when complete
	Chapters *int `json:"chapters"`
	// The amount of volumes the manga has when complete
	Volumes *int `json:"volumes"`
	// Where the media was created. (ISO 3166-1 alpha-2)
	CountryOfOrigin *string `json:"countryOfOrigin"`
	// If the media is officially licensed or a self-published doujin release
	IsLicensed *bool `json:"isLicensed"`
	// Source type the media was adapted from.
	Source *MediaSource `json:"source"`
	// Official Twitter hashtags for the media
	Hashtag *string `json:"hashtag"`
	// Media trailer or advertisement
	Trailer *MediaTrailer `json:"trailer"`
	// When the media's data was last updated
	UpdatedAt *int `json:"updatedAt"`
	// The cover images of the media
	CoverImage *MediaCoverImage `json:"coverImage"`
	// The banner image of the media
	BannerImage *string `json:"bannerImage"`
	// The genres of the media
	Genres []*string `json:"genres"`
	// Alternative titles of the media
	Synonyms []*string `json:"synonyms"`
	// A weighted average score of all the user's scores of the media
	AverageScore *int `json:"averageScore"`
	// Mean score of all the user's scores of the media
	MeanScore *int `json:"meanScore"`
	// The number of users with the media on their list
	Popularity *int `json:"popularity"`
	// Locked media may not be added to lists our favorited. This may be due to the entry pending for deletion or other reasons.
	IsLocked *bool `json:"isLocked"`
	// The amount of related activity in the past hour
	Trending *int `json:"trending"`
	// The amount of user's who have favourited the media
	Favourites *int `json:"favourites"`
	// List of tags that describes elements and themes of the media
	Tags []*MediaTag `json:"tags"`
	// Other media in the same or connecting franchise
	Relations *MediaConnection `json:"relations"`
	// The characters in the media
	Characters *CharacterConnection `json:"characters"`
	// The staff who produced the media
	Staff *StaffConnection `json:"staff"`
	// The companies who produced the media
	Studios *StudioConnection `json:"studios"`
	// If the media is marked as favourite by the current authenticated user
	IsFavourite bool `json:"isFavourite"`
	// If the media is intended only for 18+ adult audiences
	IsAdult *bool `json:"isAdult"`
	// The media's next episode airing schedule
	NextAiringEpisode *AiringSchedule `json:"nextAiringEpisode"`
	// The media's entire airing schedule
	AiringSchedule *AiringScheduleConnection `json:"airingSchedule"`
	// The media's daily trend stats
	Trends *MediaTrendConnection `json:"trends"`
	// External links to another site related to the media
	ExternalLinks []*MediaExternalLink `json:"externalLinks"`
	// Data and links to legal streaming episodes on external sites
	StreamingEpisodes []*MediaStreamingEpisode `json:"streamingEpisodes"`
	// The ranking of the media in a particular time span and format compared to other media
	Rankings []*MediaRank `json:"rankings"`
	// The authenticated user's media list entry for the media
	MediaListEntry *MediaList `json:"mediaListEntry"`
	// User reviews of the media
	Reviews *ReviewConnection `json:"reviews"`
	// User recommendations for similar media
	Recommendations *RecommendationConnection `json:"recommendations"`
	Stats           *MediaStats               `json:"stats"`
	// The url for the media page on the AniList website
	SiteURL *string `json:"siteUrl"`
	// If the media should have forum thread automatically created for it on airing episode release
	AutoCreateForumThread *bool `json:"autoCreateForumThread"`
	// If the media is blocked from being recommended to/from
	IsRecommendationBlocked *bool `json:"isRecommendationBlocked"`
	// Notes for site moderators
	ModNotes *string `json:"modNotes"`
}

// Internal - Media characters separated
type MediaCharacter struct {
	// The id of the connection
	ID *int `json:"id"`
	// The characters role in the media
	Role *CharacterRole `json:"role"`
	// The characters in the media voiced by the parent actor
	Character *Character `json:"character"`
	// The voice actor of the character
	VoiceActor *Staff `json:"voiceActor"`
}

type MediaConnection struct {
	Edges []*MediaEdge `json:"edges"`
	Nodes []*Media     `json:"nodes"`
	// The pagination information
	PageInfo *PageInfo `json:"pageInfo"`
}

type MediaCoverImage struct {
	// The cover image url of the media at its largest size. If this size isn't available, large will be provided instead.
	ExtraLarge *string `json:"extraLarge"`
	// The cover image url of the media at a large size
	Large *string `json:"large"`
	// The cover image url of the media at medium size
	Medium *string `json:"medium"`
	// Average #hex color of cover image
	Color *string `json:"color"`
}

// Media connection edge
type MediaEdge struct {
	Node *Media `json:"node"`
	// The id of the connection
	ID *int `json:"id"`
	// The type of relation to the parent model
	RelationType *MediaRelation `json:"relationType"`
	// If the studio is the main animation studio of the media (For Studio->MediaConnection field only)
	IsMainStudio bool `json:"isMainStudio"`
	// The characters in the media voiced by the parent actor
	Characters []*Character `json:"characters"`
	// The characters role in the media
	CharacterRole *CharacterRole `json:"characterRole"`
	// The role of the staff member in the production of the media
	StaffRole *string `json:"staffRole"`
	// The voice actors of the character
	VoiceActors []*Staff `json:"voiceActors"`
	// The order the media should be displayed from the users favourites
	FavouriteOrder *int `json:"favouriteOrder"`
}

// An external link to another site related to the media
type MediaExternalLink struct {
	// The id of the external link
	ID int `json:"id"`
	// The url of the external link
	URL string `json:"url"`
	// The site location of the external link
	Site string `json:"site"`
}

// An external link to another site related to the media
type MediaExternalLinkInput struct {
	// The id of the external link
	ID int `json:"id"`
	// The url of the external link
	URL string `json:"url"`
	// The site location of the external link
	Site string `json:"site"`
}

// List of anime or manga
type MediaList struct {
	// The id of the list entry
	ID int `json:"id"`
	// The id of the user owner of the list entry
	UserID int `json:"userId"`
	// The id of the media
	MediaID int `json:"mediaId"`
	// The watching/reading status
	Status *MediaListStatus `json:"status"`
	// The score of the entry
	Score *float64 `json:"score"`
	// The amount of episodes/chapters consumed by the user
	Progress *int `json:"progress"`
	// The amount of volumes read by the user
	ProgressVolumes *int `json:"progressVolumes"`
	// The amount of times the user has rewatched/read the media
	Repeat *int `json:"repeat"`
	// Priority of planning
	Priority *int `json:"priority"`
	// If the entry should only be visible to authenticated user
	Private *bool `json:"private"`
	// Text notes
	Notes *string `json:"notes"`
	// If the entry shown be hidden from non-custom lists
	HiddenFromStatusLists *bool `json:"hiddenFromStatusLists"`
	// Map of booleans for which custom lists the entry are in
	CustomLists *string `json:"customLists"`
	// Map of advanced scores with name keys
	AdvancedScores *string `json:"advancedScores"`
	// When the entry was started by the user
	StartedAt *FuzzyDate `json:"startedAt"`
	// When the entry was completed by the user
	CompletedAt *FuzzyDate `json:"completedAt"`
	// When the entry data was last updated
	UpdatedAt *int `json:"updatedAt"`
	// When the entry data was created
	CreatedAt *int   `json:"createdAt"`
	Media     *Media `json:"media"`
	User      *User  `json:"user"`
}

// List of anime or manga
type MediaListCollection struct {
	// Grouped media list entries
	Lists []*MediaListGroup `json:"lists"`
	// The owner of the list
	User *User `json:"user"`
	// If there is another chunk
	HasNextChunk *bool `json:"hasNextChunk"`
	// A map of media list entry arrays grouped by status
	StatusLists [][]*MediaList `json:"statusLists"`
	// A map of media list entry arrays grouped by custom lists
	CustomLists [][]*MediaList `json:"customLists"`
}

// List group of anime or manga entries
type MediaListGroup struct {
	// Media list entries
	Entries              []*MediaList     `json:"entries"`
	Name                 *string          `json:"name"`
	IsCustomList         *bool            `json:"isCustomList"`
	IsSplitCompletedList *bool            `json:"isSplitCompletedList"`
	Status               *MediaListStatus `json:"status"`
}

// A user's list options
type MediaListOptions struct {
	// The score format the user is using for media lists
	ScoreFormat *ScoreFormat `json:"scoreFormat"`
	// The default order list rows should be displayed in
	RowOrder *string `json:"rowOrder"`
	// (Site only) If the user should be using legacy css-supporting list versions
	UseLegacyLists *bool `json:"useLegacyLists"`
	// The user's anime list options
	AnimeList *MediaListTypeOptions `json:"animeList"`
	// The user's manga list options
	MangaList *MediaListTypeOptions `json:"mangaList"`
	// The list theme options for both lists
	SharedTheme *string `json:"sharedTheme"`
	// If the shared theme should be used instead of the individual list themes
	SharedThemeEnabled *bool `json:"sharedThemeEnabled"`
}

// A user's list options for anime or manga lists
type MediaListOptionsInput struct {
	// The order each list should be displayed in
	SectionOrder []*string `json:"sectionOrder"`
	// If the completed sections of the list should be separated by format
	SplitCompletedSectionByFormat *bool `json:"splitCompletedSectionByFormat"`
	// The names of the user's custom lists
	CustomLists []*string `json:"customLists"`
	// The names of the user's advanced scoring sections
	AdvancedScoring []*string `json:"advancedScoring"`
	// If advanced scoring is enabled
	AdvancedScoringEnabled *bool `json:"advancedScoringEnabled"`
	// list theme
	Theme *string `json:"theme"`
}

// A user's list options for anime or manga lists
type MediaListTypeOptions struct {
	// The order each list should be displayed in
	SectionOrder []*string `json:"sectionOrder"`
	// If the completed sections of the list should be separated by format
	SplitCompletedSectionByFormat *bool `json:"splitCompletedSectionByFormat"`
	// The list theme options
	Theme *string `json:"theme"`
	// The names of the user's custom lists
	CustomLists []*string `json:"customLists"`
	// The names of the user's advanced scoring sections
	AdvancedScoring []*string `json:"advancedScoring"`
	// If advanced scoring is enabled
	AdvancedScoringEnabled *bool `json:"advancedScoringEnabled"`
}

// The ranking of a media in a particular time span and format compared to other media
type MediaRank struct {
	// The id of the rank
	ID int `json:"id"`
	// The numerical rank of the media
	Rank int `json:"rank"`
	// The type of ranking
	Type MediaRankType `json:"type"`
	// The format the media is ranked within
	Format MediaFormat `json:"format"`
	// The year the media is ranked within
	Year *int `json:"year"`
	// The season the media is ranked within
	Season *MediaSeason `json:"season"`
	// If the ranking is based on all time instead of a season/year
	AllTime *bool `json:"allTime"`
	// String that gives context to the ranking type and time span
	Context string `json:"context"`
}

// A media's statistics
type MediaStats struct {
	ScoreDistribution  []*ScoreDistribution  `json:"scoreDistribution"`
	StatusDistribution []*StatusDistribution `json:"statusDistribution"`
	AiringProgression  []*AiringProgression  `json:"airingProgression"`
}

// Data and links to legal streaming episodes on external sites
type MediaStreamingEpisode struct {
	// Title of the episode
	Title *string `json:"title"`
	// Url of episode image thumbnail
	Thumbnail *string `json:"thumbnail"`
	// The url of the episode
	URL *string `json:"url"`
	// The site location of the streaming episodes
	Site *string `json:"site"`
}

// Media submission
type MediaSubmission struct {
	// The id of the submission
	ID int `json:"id"`
	// User submitter of the submission
	Submitter *User `json:"submitter"`
	// Status of the submission
	Status         *SubmissionStatus            `json:"status"`
	SubmitterStats *string                      `json:"submitterStats"`
	Notes          *string                      `json:"notes"`
	Source         *string                      `json:"source"`
	Changes        []*string                    `json:"changes"`
	Media          *Media                       `json:"media"`
	Submission     *Media                       `json:"submission"`
	Characters     []*MediaSubmissionComparison `json:"characters"`
	Staff          []*MediaSubmissionComparison `json:"staff"`
	Studios        []*MediaSubmissionComparison `json:"studios"`
	Relations      []*MediaEdge                 `json:"relations"`
	ExternalLinks  []*MediaExternalLink         `json:"externalLinks"`
	CreatedAt      *int                         `json:"createdAt"`
}

// Media submission with comparison to current data
type MediaSubmissionComparison struct {
	Submission *MediaSubmissionEdge `json:"submission"`
	Character  *MediaCharacter      `json:"character"`
	Staff      *StaffEdge           `json:"staff"`
	Studio     *StudioEdge          `json:"studio"`
}

type MediaSubmissionEdge struct {
	// The id of the direct submission
	ID                   *int           `json:"id"`
	CharacterRole        *CharacterRole `json:"characterRole"`
	StaffRole            *string        `json:"staffRole"`
	IsMain               *bool          `json:"isMain"`
	Character            *Character     `json:"character"`
	CharacterSubmission  *Character     `json:"characterSubmission"`
	VoiceActor           *Staff         `json:"voiceActor"`
	VoiceActorSubmission *Staff         `json:"voiceActorSubmission"`
	Staff                *Staff         `json:"staff"`
	StaffSubmission      *Staff         `json:"staffSubmission"`
	Studio               *Studio        `json:"studio"`
	Media                *Media         `json:"media"`
}

// A tag that describes a theme or element of the media
type MediaTag struct {
	// The id of the tag
	ID int `json:"id"`
	// The name of the tag
	Name string `json:"name"`
	// A general description of the tag
	Description *string `json:"description"`
	// The categories of tags this tag belongs to
	Category *string `json:"category"`
	// The relevance ranking of the tag out of the 100 for this media
	Rank *int `json:"rank"`
	// If the tag could be a spoiler for any media
	IsGeneralSpoiler *bool `json:"isGeneralSpoiler"`
	// If the tag is a spoiler for this media
	IsMediaSpoiler *bool `json:"isMediaSpoiler"`
	// If the tag is only for adult 18+ media
	IsAdult *bool `json:"isAdult"`
}

// The official titles of the media in various languages
type MediaTitle struct {
	// The romanization of the native language title
	Romaji *string `json:"romaji"`
	// The official english title
	English *string `json:"english"`
	// Official title in it's native language
	Native *string `json:"native"`
	// The currently authenticated users preferred title language. Default romaji for non-authenticated
	UserPreferred *string `json:"userPreferred"`
}

// The official titles of the media in various languages
type MediaTitleInput struct {
	// The romanization of the native language title
	Romaji *string `json:"romaji"`
	// The official english title
	English *string `json:"english"`
	// Official title in it's native language
	Native *string `json:"native"`
}

// Media trailer or advertisement
type MediaTrailer struct {
	// The trailer video id
	ID *string `json:"id"`
	// The site the video is hosted by (Currently either youtube or dailymotion)
	Site *string `json:"site"`
	// The url for the thumbnail image of the video
	Thumbnail *string `json:"thumbnail"`
}

// Daily media statistics
type MediaTrend struct {
	// The id of the tag
	MediaID int `json:"mediaId"`
	// The day the data was recorded (timestamp)
	Date int `json:"date"`
	// The amount of media activity on the day
	Trending int `json:"trending"`
	// A weighted average score of all the user's scores of the media
	AverageScore *int `json:"averageScore"`
	// The number of users with the media on their list
	Popularity *int `json:"popularity"`
	// The number of users with watching/reading the media
	InProgress *int `json:"inProgress"`
	// If the media was being released at this time
	Releasing bool `json:"releasing"`
	// The episode number of the anime released on this day
	Episode *int `json:"episode"`
	// The related media
	Media *Media `json:"media"`
}

type MediaTrendConnection struct {
	Edges []*MediaTrendEdge `json:"edges"`
	Nodes []*MediaTrend     `json:"nodes"`
	// The pagination information
	PageInfo *PageInfo `json:"pageInfo"`
}

// Media trend connection edge
type MediaTrendEdge struct {
	Node *MediaTrend `json:"node"`
}

// User message activity
type MessageActivity struct {
	// The id of the activity
	ID int `json:"id"`
	// The user id of the activity's recipient
	RecipientID *int `json:"recipientId"`
	// The user id of the activity's sender
	MessengerID *int `json:"messengerId"`
	// The type of the activity
	Type *ActivityType `json:"type"`
	// The number of activity replies
	ReplyCount int `json:"replyCount"`
	// The message text (Markdown)
	Message *string `json:"message"`
	// If the activity is locked and can receive replies
	IsLocked *bool `json:"isLocked"`
	// If the currently authenticated user is subscribed to the activity
	IsSubscribed *bool `json:"isSubscribed"`
	// The amount of likes the activity has
	LikeCount int `json:"likeCount"`
	// If the currently authenticated user liked the activity
	IsLiked *bool `json:"isLiked"`
	// If the message is private and only viewable to the sender and recipients
	IsPrivate *bool `json:"isPrivate"`
	// The url for the activity page on the AniList website
	SiteURL *string `json:"siteUrl"`
	// The time the activity was created at
	CreatedAt int `json:"createdAt"`
	// The user who the activity message was sent to
	Recipient *User `json:"recipient"`
	// The user who sent the activity message
	Messenger *User `json:"messenger"`
	// The written replies to the activity
	Replies []*ActivityReply `json:"replies"`
	// The users who liked the activity
	Likes []*User `json:"likes"`
}

func (MessageActivity) IsLikeableUnion() {}
func (MessageActivity) IsActivityUnion() {}

type ModAction struct {
	// The id of the action
	ID         int            `json:"id"`
	User       *User          `json:"user"`
	Mod        *User          `json:"mod"`
	Type       *ModActionType `json:"type"`
	ObjectID   *int           `json:"objectId"`
	ObjectType *string        `json:"objectType"`
	Data       *string        `json:"data"`
	CreatedAt  int            `json:"createdAt"`
}

// Notification option
type NotificationOption struct {
	// The type of notification
	Type *NotificationType `json:"type"`
	// Whether this type of notification is enabled
	Enabled *bool `json:"enabled"`
}

// Notification option input
type NotificationOptionInput struct {
	// The type of notification
	Type *NotificationType `json:"type"`
	// Whether this type of notification is enabled
	Enabled *bool `json:"enabled"`
}

// Page of data
type Page struct {
	// The pagination information
	PageInfo        *PageInfo           `json:"pageInfo"`
	Users           []*User             `json:"users"`
	Media           []*Media            `json:"media"`
	Characters      []*Character        `json:"characters"`
	Staff           []*Staff            `json:"staff"`
	Studios         []*Studio           `json:"studios"`
	MediaList       []*MediaList        `json:"mediaList"`
	AiringSchedules []*AiringSchedule   `json:"airingSchedules"`
	MediaTrends     []*MediaTrend       `json:"mediaTrends"`
	Notifications   []NotificationUnion `json:"notifications"`
	Followers       []*User             `json:"followers"`
	Following       []*User             `json:"following"`
	Activities      []ActivityUnion     `json:"activities"`
	ActivityReplies []*ActivityReply    `json:"activityReplies"`
	Threads         []*Thread           `json:"threads"`
	ThreadComments  []*ThreadComment    `json:"threadComments"`
	Reviews         []*Review           `json:"reviews"`
	Recommendations []*Recommendation   `json:"recommendations"`
	Likes           []*User             `json:"likes"`
}

type PageInfo struct {
	// The total number of items
	Total *int `json:"total"`
	// The count on a page
	PerPage *int `json:"perPage"`
	// The current page
	CurrentPage *int `json:"currentPage"`
	// The last page
	LastPage *int `json:"lastPage"`
	// If there is another page
	HasNextPage *bool `json:"hasNextPage"`
}

// Provides the parsed markdown as html
type ParsedMarkdown struct {
	// The parsed markdown as html
	HTML *string `json:"html"`
}

// Media recommendation
type Recommendation struct {
	// The id of the recommendation
	ID int `json:"id"`
	// Users rating of the recommendation
	Rating *int `json:"rating"`
	// The rating of the recommendation by currently authenticated user
	UserRating *RecommendationRating `json:"userRating"`
	// The media the recommendation is from
	Media *Media `json:"media"`
	// The recommended media
	MediaRecommendation *Media `json:"mediaRecommendation"`
	// The user that first created the recommendation
	User *User `json:"user"`
}

type RecommendationConnection struct {
	Edges []*RecommendationEdge `json:"edges"`
	Nodes []*Recommendation     `json:"nodes"`
	// The pagination information
	PageInfo *PageInfo `json:"pageInfo"`
}

// Recommendation connection edge
type RecommendationEdge struct {
	Node *Recommendation `json:"node"`
}

// Notification for when new media is added to the site
type RelatedMediaAdditionNotification struct {
	// The id of the Notification
	ID int `json:"id"`
	// The type of notification
	Type *NotificationType `json:"type"`
	// The id of the new media
	MediaID int `json:"mediaId"`
	// The notification context text
	Context *string `json:"context"`
	// The time the notification was created at
	CreatedAt *int `json:"createdAt"`
	// The associated media of the airing schedule
	Media *Media `json:"media"`
}

func (RelatedMediaAdditionNotification) IsNotificationUnion() {}

type Report struct {
	ID       int     `json:"id"`
	Reporter *User   `json:"reporter"`
	Reported *User   `json:"reported"`
	Reason   *string `json:"reason"`
	// When the entry data was created
	CreatedAt *int `json:"createdAt"`
}

// A Review that features in an anime or manga
type Review struct {
	// The id of the review
	ID int `json:"id"`
	// The id of the review's creator
	UserID int `json:"userId"`
	// The id of the review's media
	MediaID int `json:"mediaId"`
	// For which type of media the review is for
	MediaType *MediaType `json:"mediaType"`
	// A short summary of the review
	Summary *string `json:"summary"`
	// The main review body text
	Body *string `json:"body"`
	// The total user rating of the review
	Rating *int `json:"rating"`
	// The amount of user ratings of the review
	RatingAmount *int `json:"ratingAmount"`
	// The rating of the review by currently authenticated user
	UserRating *ReviewRating `json:"userRating"`
	// The review score of the media
	Score *int `json:"score"`
	// If the review is not yet publicly published and is only viewable by creator
	Private *bool `json:"private"`
	// The url for the review page on the AniList website
	SiteURL *string `json:"siteUrl"`
	// The time of the thread creation
	CreatedAt int `json:"createdAt"`
	// The time of the thread last update
	UpdatedAt int `json:"updatedAt"`
	// The creator of the review
	User *User `json:"user"`
	// The media the review is of
	Media *Media `json:"media"`
}

type ReviewConnection struct {
	Edges []*ReviewEdge `json:"edges"`
	Nodes []*Review     `json:"nodes"`
	// The pagination information
	PageInfo *PageInfo `json:"pageInfo"`
}

// Review connection edge
type ReviewEdge struct {
	Node *Review `json:"node"`
}

// Feed of mod edit activity
type RevisionHistory struct {
	// The id of the media
	ID int `json:"id"`
	// The action taken on the objects
	Action *RevisionHistoryAction `json:"action"`
	// A JSON object of the fields that changed
	Changes *string `json:"changes"`
	// The user who made the edit to the object
	User *User `json:"user"`
	// The media the mod feed entry references
	Media *Media `json:"media"`
	// The character the mod feed entry references
	Character *Character `json:"character"`
	// The staff member the mod feed entry references
	Staff *Staff `json:"staff"`
	// The studio the mod feed entry references
	Studio *Studio `json:"studio"`
	// When the mod feed entry was created
	CreatedAt *int `json:"createdAt"`
}

// A user's list score distribution.
type ScoreDistribution struct {
	Score *int `json:"score"`
	// The amount of list entries with this score
	Amount *int `json:"amount"`
}

type SiteStatistics struct {
	Users      *SiteTrendConnection `json:"users"`
	Anime      *SiteTrendConnection `json:"anime"`
	Manga      *SiteTrendConnection `json:"manga"`
	Characters *SiteTrendConnection `json:"characters"`
	Staff      *SiteTrendConnection `json:"staff"`
	Studios    *SiteTrendConnection `json:"studios"`
	Reviews    *SiteTrendConnection `json:"reviews"`
}

// Daily site statistics
type SiteTrend struct {
	// The day the data was recorded (timestamp)
	Date  int `json:"date"`
	Count int `json:"count"`
	// The change from yesterday
	Change int `json:"change"`
}

type SiteTrendConnection struct {
	Edges []*SiteTrendEdge `json:"edges"`
	Nodes []*SiteTrend     `json:"nodes"`
	// The pagination information
	PageInfo *PageInfo `json:"pageInfo"`
}

// Site trend connection edge
type SiteTrendEdge struct {
	Node *SiteTrend `json:"node"`
}

// Voice actors or production staff
type Staff struct {
	// The id of the staff member
	ID int `json:"id"`
	// The names of the staff member
	Name *StaffName `json:"name"`
	// The primary language of the staff member
	Language *StaffLanguage `json:"language"`
	// The staff images
	Image *StaffImage `json:"image"`
	// A general description of the staff member
	Description *string `json:"description"`
	// If the staff member is marked as favourite by the currently authenticated user
	IsFavourite bool `json:"isFavourite"`
	// The url for the staff page on the AniList website
	SiteURL *string `json:"siteUrl"`
	// Media where the staff member has a production role
	StaffMedia *MediaConnection `json:"staffMedia"`
	// Characters voiced by the actor
	Characters *CharacterConnection `json:"characters"`
	UpdatedAt  *int                 `json:"updatedAt"`
	// Staff member that the submission is referencing
	Staff *Staff `json:"staff"`
	// Submitter for the submission
	Submitter *User `json:"submitter"`
	// Status of the submission
	SubmissionStatus *int `json:"submissionStatus"`
	// Inner details of submission status
	SubmissionNotes *string `json:"submissionNotes"`
	// The amount of user's who have favourited the staff member
	Favourites *int `json:"favourites"`
	// Notes for site moderators
	ModNotes *string `json:"modNotes"`
}

type StaffConnection struct {
	Edges []*StaffEdge `json:"edges"`
	Nodes []*Staff     `json:"nodes"`
	// The pagination information
	PageInfo *PageInfo `json:"pageInfo"`
}

// Staff connection edge
type StaffEdge struct {
	Node *Staff `json:"node"`
	// The id of the connection
	ID *int `json:"id"`
	// The role of the staff member in the production of the media
	Role *string `json:"role"`
	// The order the staff should be displayed from the users favourites
	FavouriteOrder *int `json:"favouriteOrder"`
}

type StaffImage struct {
	// The person's image of media at its largest size
	Large *string `json:"large"`
	// The person's image of media at medium size
	Medium *string `json:"medium"`
}

// The names of the staff member
type StaffName struct {
	// The person's given name
	First *string `json:"first"`
	// The person's surname
	Last *string `json:"last"`
	// The person's full name
	Full *string `json:"full"`
	// The person's full name in their native language
	Native *string `json:"native"`
	// Other names the staff member might be referred to as (pen names)
	Alternative []*string `json:"alternative"`
}

// The names of the staff member
type StaffNameInput struct {
	// The person's given name
	First *string `json:"first"`
	// The person's surname
	Last *string `json:"last"`
	// The person's full name in their native language
	Native *string `json:"native"`
	// Other names the character might be referred by
	Alternative []*string `json:"alternative"`
}

// User's staff statistics
type StaffStats struct {
	Staff     *Staff `json:"staff"`
	Amount    *int   `json:"amount"`
	MeanScore *int   `json:"meanScore"`
	// The amount of time in minutes the staff member has been watched by the user
	TimeWatched *int `json:"timeWatched"`
}

// A submission for a staff that features in an anime or manga
type StaffSubmission struct {
	// The id of the submission
	ID int `json:"id"`
	// Staff that the submission is referencing
	Staff *Staff `json:"staff"`
	// The staff submission changes
	Submission *Staff `json:"submission"`
	// Submitter for the submission
	Submitter *User `json:"submitter"`
	// Status of the submission
	Status *SubmissionStatus `json:"status"`
	// Inner details of submission status
	Notes     *string `json:"notes"`
	Source    *string `json:"source"`
	CreatedAt *int    `json:"createdAt"`
}

// The distribution of the watching/reading status of media or a user's list
type StatusDistribution struct {
	// The day the activity took place (Unix timestamp)
	Status *MediaListStatus `json:"status"`
	// The amount of entries with this status
	Amount *int `json:"amount"`
}

// Animation or production company
type Studio struct {
	// The id of the studio
	ID int `json:"id"`
	// The name of the studio
	Name string `json:"name"`
	// If the studio is an animation studio or a different kind of company
	IsAnimationStudio bool `json:"isAnimationStudio"`
	// The media the studio has worked on
	Media *MediaConnection `json:"media"`
	// The url for the studio page on the AniList website
	SiteURL *string `json:"siteUrl"`
	// If the studio is marked as favourite by the currently authenticated user
	IsFavourite bool `json:"isFavourite"`
	// The amount of user's who have favourited the studio
	Favourites *int `json:"favourites"`
}

type StudioConnection struct {
	Edges []*StudioEdge `json:"edges"`
	Nodes []*Studio     `json:"nodes"`
	// The pagination information
	PageInfo *PageInfo `json:"pageInfo"`
}

// Studio connection edge
type StudioEdge struct {
	Node *Studio `json:"node"`
	// The id of the connection
	ID *int `json:"id"`
	// If the studio is the main animation studio of the anime
	IsMain bool `json:"isMain"`
	// The order the character should be displayed from the users favourites
	FavouriteOrder *int `json:"favouriteOrder"`
}

// User's studio statistics
type StudioStats struct {
	Studio    *Studio `json:"studio"`
	Amount    *int    `json:"amount"`
	MeanScore *int    `json:"meanScore"`
	// The amount of time in minutes the studio's works have been watched by the user
	TimeWatched *int `json:"timeWatched"`
}

// User's tag statistics
type TagStats struct {
	Tag       *MediaTag `json:"tag"`
	Amount    *int      `json:"amount"`
	MeanScore *int      `json:"meanScore"`
	// The amount of time in minutes the tag has been watched by the user
	TimeWatched *int `json:"timeWatched"`
}

// User text activity
type TextActivity struct {
	// The id of the activity
	ID int `json:"id"`
	// The user id of the activity's creator
	UserID *int `json:"userId"`
	// The type of activity
	Type *ActivityType `json:"type"`
	// The number of activity replies
	ReplyCount int `json:"replyCount"`
	// The status text (Markdown)
	Text *string `json:"text"`
	// The url for the activity page on the AniList website
	SiteURL *string `json:"siteUrl"`
	// If the activity is locked and can receive replies
	IsLocked *bool `json:"isLocked"`
	// If the currently authenticated user is subscribed to the activity
	IsSubscribed *bool `json:"isSubscribed"`
	// The amount of likes the activity has
	LikeCount int `json:"likeCount"`
	// If the currently authenticated user liked the activity
	IsLiked *bool `json:"isLiked"`
	// The time the activity was created at
	CreatedAt int `json:"createdAt"`
	// The user who created the activity
	User *User `json:"user"`
	// The written replies to the activity
	Replies []*ActivityReply `json:"replies"`
	// The users who liked the activity
	Likes []*User `json:"likes"`
}

func (TextActivity) IsLikeableUnion() {}
func (TextActivity) IsActivityUnion() {}

// Forum Thread
type Thread struct {
	// The id of the thread
	ID int `json:"id"`
	// The title of the thread
	Title *string `json:"title"`
	// The text body of the thread (Markdown)
	Body *string `json:"body"`
	// The id of the thread owner user
	UserID int `json:"userId"`
	// The id of the user who most recently commented on the thread
	ReplyUserID *int `json:"replyUserId"`
	// The id of the most recent comment on the thread
	ReplyCommentID *int `json:"replyCommentId"`
	// The number of comments on the thread
	ReplyCount *int `json:"replyCount"`
	// The number of times users have viewed the thread
	ViewCount *int `json:"viewCount"`
	// If the thread is locked and can receive comments
	IsLocked *bool `json:"isLocked"`
	// If the thread is stickied and should be displayed at the top of the page
	IsSticky *bool `json:"isSticky"`
	// If the currently authenticated user is subscribed to the thread
	IsSubscribed *bool `json:"isSubscribed"`
	// The amount of likes the thread has
	LikeCount int `json:"likeCount"`
	// If the currently authenticated user liked the thread
	IsLiked *bool `json:"isLiked"`
	// The time of the last reply
	RepliedAt *int `json:"repliedAt"`
	// The time of the thread creation
	CreatedAt int `json:"createdAt"`
	// The time of the thread last update
	UpdatedAt int `json:"updatedAt"`
	// The owner of the thread
	User *User `json:"user"`
	// The user to last reply to the thread
	ReplyUser *User `json:"replyUser"`
	// The users who liked the thread
	Likes []*User `json:"likes"`
	// The url for the thread page on the AniList website
	SiteURL *string `json:"siteUrl"`
	// The categories of the thread
	Categories []*ThreadCategory `json:"categories"`
	// The media categories of the thread
	MediaCategories []*Media `json:"mediaCategories"`
}

func (Thread) IsLikeableUnion() {}

// A forum thread category
type ThreadCategory struct {
	// The id of the category
	ID int `json:"id"`
	// The name of the category
	Name string `json:"name"`
}

// Forum Thread Comment
type ThreadComment struct {
	// The id of the comment
	ID int `json:"id"`
	// The user id of the comment's owner
	UserID *int `json:"userId"`
	// The id of thread the comment belongs to
	ThreadID *int `json:"threadId"`
	// The text content of the comment (Markdown)
	Comment *string `json:"comment"`
	// The amount of likes the comment has
	LikeCount int `json:"likeCount"`
	// If the currently authenticated user liked the comment
	IsLiked *bool `json:"isLiked"`
	// The url for the comment page on the AniList website
	SiteURL *string `json:"siteUrl"`
	// The time of the comments creation
	CreatedAt int `json:"createdAt"`
	// The time of the comments last update
	UpdatedAt int `json:"updatedAt"`
	// The thread the comment belongs to
	Thread *Thread `json:"thread"`
	// The user who created the comment
	User *User `json:"user"`
	// The users who liked the comment
	Likes []*User `json:"likes"`
	// The comment's child reply comments
	ChildComments *string `json:"childComments"`
}

func (ThreadComment) IsLikeableUnion() {}

// Notification for when a thread comment is liked
type ThreadCommentLikeNotification struct {
	// The id of the Notification
	ID int `json:"id"`
	// The id of the user who liked to the activity
	UserID int `json:"userId"`
	// The type of notification
	Type *NotificationType `json:"type"`
	// The id of the activity which was liked
	CommentID int `json:"commentId"`
	// The notification context text
	Context *string `json:"context"`
	// The time the notification was created at
	CreatedAt *int `json:"createdAt"`
	// The thread that the relevant comment belongs to
	Thread *Thread `json:"thread"`
	// The thread comment that was liked
	Comment *ThreadComment `json:"comment"`
	// The user who liked the activity
	User *User `json:"user"`
}

func (ThreadCommentLikeNotification) IsNotificationUnion() {}

// Notification for when authenticated user is @ mentioned in a forum thread comment
type ThreadCommentMentionNotification struct {
	// The id of the Notification
	ID int `json:"id"`
	// The id of the user who mentioned the authenticated user
	UserID int `json:"userId"`
	// The type of notification
	Type *NotificationType `json:"type"`
	// The id of the comment where mentioned
	CommentID int `json:"commentId"`
	// The notification context text
	Context *string `json:"context"`
	// The time the notification was created at
	CreatedAt *int `json:"createdAt"`
	// The thread that the relevant comment belongs to
	Thread *Thread `json:"thread"`
	// The thread comment that included the @ mention
	Comment *ThreadComment `json:"comment"`
	// The user who mentioned the authenticated user
	User *User `json:"user"`
}

func (ThreadCommentMentionNotification) IsNotificationUnion() {}

// Notification for when a user replies to your forum thread comment
type ThreadCommentReplyNotification struct {
	// The id of the Notification
	ID int `json:"id"`
	// The id of the user who create the comment reply
	UserID int `json:"userId"`
	// The type of notification
	Type *NotificationType `json:"type"`
	// The id of the reply comment
	CommentID int `json:"commentId"`
	// The notification context text
	Context *string `json:"context"`
	// The time the notification was created at
	CreatedAt *int `json:"createdAt"`
	// The thread that the relevant comment belongs to
	Thread *Thread `json:"thread"`
	// The reply thread comment
	Comment *ThreadComment `json:"comment"`
	// The user who replied to the activity
	User *User `json:"user"`
}

func (ThreadCommentReplyNotification) IsNotificationUnion() {}

// Notification for when a user replies to a subscribed forum thread
type ThreadCommentSubscribedNotification struct {
	// The id of the Notification
	ID int `json:"id"`
	// The id of the user who commented on the thread
	UserID int `json:"userId"`
	// The type of notification
	Type *NotificationType `json:"type"`
	// The id of the new comment in the subscribed thread
	CommentID int `json:"commentId"`
	// The notification context text
	Context *string `json:"context"`
	// The time the notification was created at
	CreatedAt *int `json:"createdAt"`
	// The thread that the relevant comment belongs to
	Thread *Thread `json:"thread"`
	// The reply thread comment
	Comment *ThreadComment `json:"comment"`
	// The user who replied to the subscribed thread
	User *User `json:"user"`
}

func (ThreadCommentSubscribedNotification) IsNotificationUnion() {}

// Notification for when a thread is liked
type ThreadLikeNotification struct {
	// The id of the Notification
	ID int `json:"id"`
	// The id of the user who liked to the activity
	UserID int `json:"userId"`
	// The type of notification
	Type *NotificationType `json:"type"`
	// The id of the thread which was liked
	ThreadID int `json:"threadId"`
	// The notification context text
	Context *string `json:"context"`
	// The time the notification was created at
	CreatedAt *int `json:"createdAt"`
	// The thread that the relevant comment belongs to
	Thread *Thread `json:"thread"`
	// The liked thread comment
	Comment *ThreadComment `json:"comment"`
	// The user who liked the activity
	User *User `json:"user"`
}

func (ThreadLikeNotification) IsNotificationUnion() {}

// A user
type User struct {
	// The id of the user
	ID int `json:"id"`
	// The name of the user
	Name string `json:"name"`
	// The bio written by user (Markdown)
	About *string `json:"about"`
	// The user's avatar images
	Avatar *UserAvatar `json:"avatar"`
	// The user's banner images
	BannerImage *string `json:"bannerImage"`
	// If the authenticated user if following this user
	IsFollowing *bool `json:"isFollowing"`
	// If this user if following the authenticated user
	IsFollower *bool `json:"isFollower"`
	// If the user is blocked by the authenticated user
	IsBlocked *bool   `json:"isBlocked"`
	Bans      *string `json:"bans"`
	// The user's general options
	Options *UserOptions `json:"options"`
	// The user's media list options
	MediaListOptions *MediaListOptions `json:"mediaListOptions"`
	// The users favourites
	Favourites *Favourites `json:"favourites"`
	// The users anime & manga list statistics
	Statistics *UserStatisticTypes `json:"statistics"`
	// The number of unread notifications the user has
	UnreadNotificationCount *int `json:"unreadNotificationCount"`
	// The url for the user page on the AniList website
	SiteURL *string `json:"siteUrl"`
	// The donation tier of the user
	DonatorTier *int `json:"donatorTier"`
	// Custom donation badge text
	DonatorBadge *string `json:"donatorBadge"`
	// If the user is a moderator or data moderator
	ModeratorStatus *string `json:"moderatorStatus"`
	// When the user's data was last updated
	UpdatedAt *int `json:"updatedAt"`
	// The user's statistics
	Stats *UserStats `json:"stats"`
}

// A user's activity history stats.
type UserActivityHistory struct {
	// The day the activity took place (Unix timestamp)
	Date *int `json:"date"`
	// The amount of activity on the day
	Amount *int `json:"amount"`
	// The level of activity represented on a 1-10 scale
	Level *int `json:"level"`
}

// A user's avatars
type UserAvatar struct {
	// The avatar of user at its largest size
	Large *string `json:"large"`
	// The avatar of user at medium size
	Medium *string `json:"medium"`
}

type UserCountryStatistic struct {
	Count          int     `json:"count"`
	MeanScore      float64 `json:"meanScore"`
	MinutesWatched int     `json:"minutesWatched"`
	ChaptersRead   int     `json:"chaptersRead"`
	MediaIds       []*int  `json:"mediaIds"`
	Country        *string `json:"country"`
}

type UserFormatStatistic struct {
	Count          int          `json:"count"`
	MeanScore      float64      `json:"meanScore"`
	MinutesWatched int          `json:"minutesWatched"`
	ChaptersRead   int          `json:"chaptersRead"`
	MediaIds       []*int       `json:"mediaIds"`
	Format         *MediaFormat `json:"format"`
}

type UserGenreStatistic struct {
	Count          int     `json:"count"`
	MeanScore      float64 `json:"meanScore"`
	MinutesWatched int     `json:"minutesWatched"`
	ChaptersRead   int     `json:"chaptersRead"`
	MediaIds       []*int  `json:"mediaIds"`
	Genre          *string `json:"genre"`
}

type UserLengthStatistic struct {
	Count          int     `json:"count"`
	MeanScore      float64 `json:"meanScore"`
	MinutesWatched int     `json:"minutesWatched"`
	ChaptersRead   int     `json:"chaptersRead"`
	MediaIds       []*int  `json:"mediaIds"`
	Length         *string `json:"length"`
}

// User data for moderators
type UserModData struct {
	Alts   []*User `json:"alts"`
	Bans   *string `json:"bans"`
	IP     *string `json:"ip"`
	Counts *string `json:"counts"`
}

// A user's general options
type UserOptions struct {
	// The language the user wants to see media titles in
	TitleLanguage *UserTitleLanguage `json:"titleLanguage"`
	// Whether the user has enabled viewing of 18+ content
	DisplayAdultContent *bool `json:"displayAdultContent"`
	// Whether the user receives notifications when a show they are watching aires
	AiringNotifications *bool `json:"airingNotifications"`
	// Profile highlight color (blue, purple, pink, orange, red, green, gray)
	ProfileColor *string `json:"profileColor"`
	// Notification options
	NotificationOptions []*NotificationOption `json:"notificationOptions"`
}

type UserReleaseYearStatistic struct {
	Count          int     `json:"count"`
	MeanScore      float64 `json:"meanScore"`
	MinutesWatched int     `json:"minutesWatched"`
	ChaptersRead   int     `json:"chaptersRead"`
	MediaIds       []*int  `json:"mediaIds"`
	ReleaseYear    *int    `json:"releaseYear"`
}

type UserScoreStatistic struct {
	Count          int     `json:"count"`
	MeanScore      float64 `json:"meanScore"`
	MinutesWatched int     `json:"minutesWatched"`
	ChaptersRead   int     `json:"chaptersRead"`
	MediaIds       []*int  `json:"mediaIds"`
	Score          *int    `json:"score"`
}

type UserStaffStatistic struct {
	Count          int     `json:"count"`
	MeanScore      float64 `json:"meanScore"`
	MinutesWatched int     `json:"minutesWatched"`
	ChaptersRead   int     `json:"chaptersRead"`
	MediaIds       []*int  `json:"mediaIds"`
	Staff          *Staff  `json:"staff"`
}

type UserStartYearStatistic struct {
	Count          int     `json:"count"`
	MeanScore      float64 `json:"meanScore"`
	MinutesWatched int     `json:"minutesWatched"`
	ChaptersRead   int     `json:"chaptersRead"`
	MediaIds       []*int  `json:"mediaIds"`
	StartYear      *int    `json:"startYear"`
}

type UserStatisticTypes struct {
	Anime *UserStatistics `json:"anime"`
	Manga *UserStatistics `json:"manga"`
}

type UserStatistics struct {
	Count             int                         `json:"count"`
	MeanScore         float64                     `json:"meanScore"`
	StandardDeviation float64                     `json:"standardDeviation"`
	MinutesWatched    int                         `json:"minutesWatched"`
	EpisodesWatched   int                         `json:"episodesWatched"`
	ChaptersRead      int                         `json:"chaptersRead"`
	VolumesRead       int                         `json:"volumesRead"`
	Formats           []*UserFormatStatistic      `json:"formats"`
	Statuses          []*UserStatusStatistic      `json:"statuses"`
	Scores            []*UserScoreStatistic       `json:"scores"`
	Lengths           []*UserLengthStatistic      `json:"lengths"`
	ReleaseYears      []*UserReleaseYearStatistic `json:"releaseYears"`
	StartYears        []*UserStartYearStatistic   `json:"startYears"`
	Genres            []*UserGenreStatistic       `json:"genres"`
	Tags              []*UserTagStatistic         `json:"tags"`
	Countries         []*UserCountryStatistic     `json:"countries"`
	VoiceActors       []*UserVoiceActorStatistic  `json:"voiceActors"`
	Staff             []*UserStaffStatistic       `json:"staff"`
	Studios           []*UserStudioStatistic      `json:"studios"`
}

// A user's statistics
type UserStats struct {
	// The amount of anime the user has watched in minutes
	WatchedTime *int `json:"watchedTime"`
	// The amount of manga chapters the user has read
	ChaptersRead            *int                   `json:"chaptersRead"`
	ActivityHistory         []*UserActivityHistory `json:"activityHistory"`
	AnimeStatusDistribution []*StatusDistribution  `json:"animeStatusDistribution"`
	MangaStatusDistribution []*StatusDistribution  `json:"mangaStatusDistribution"`
	AnimeScoreDistribution  []*ScoreDistribution   `json:"animeScoreDistribution"`
	MangaScoreDistribution  []*ScoreDistribution   `json:"mangaScoreDistribution"`
	AnimeListScores         *ListScoreStats        `json:"animeListScores"`
	MangaListScores         *ListScoreStats        `json:"mangaListScores"`
	FavouredGenresOverview  []*GenreStats          `json:"favouredGenresOverview"`
	FavouredGenres          []*GenreStats          `json:"favouredGenres"`
	FavouredTags            []*TagStats            `json:"favouredTags"`
	FavouredActors          []*StaffStats          `json:"favouredActors"`
	FavouredStaff           []*StaffStats          `json:"favouredStaff"`
	FavouredStudios         []*StudioStats         `json:"favouredStudios"`
	FavouredYears           []*YearStats           `json:"favouredYears"`
	FavouredFormats         []*FormatStats         `json:"favouredFormats"`
}

type UserStatusStatistic struct {
	Count          int              `json:"count"`
	MeanScore      float64          `json:"meanScore"`
	MinutesWatched int              `json:"minutesWatched"`
	ChaptersRead   int              `json:"chaptersRead"`
	MediaIds       []*int           `json:"mediaIds"`
	Status         *MediaListStatus `json:"status"`
}

type UserStudioStatistic struct {
	Count          int     `json:"count"`
	MeanScore      float64 `json:"meanScore"`
	MinutesWatched int     `json:"minutesWatched"`
	ChaptersRead   int     `json:"chaptersRead"`
	MediaIds       []*int  `json:"mediaIds"`
	Studio         *Studio `json:"studio"`
}

type UserTagStatistic struct {
	Count          int       `json:"count"`
	MeanScore      float64   `json:"meanScore"`
	MinutesWatched int       `json:"minutesWatched"`
	ChaptersRead   int       `json:"chaptersRead"`
	MediaIds       []*int    `json:"mediaIds"`
	Tag            *MediaTag `json:"tag"`
}

type UserVoiceActorStatistic struct {
	Count          int     `json:"count"`
	MeanScore      float64 `json:"meanScore"`
	MinutesWatched int     `json:"minutesWatched"`
	ChaptersRead   int     `json:"chaptersRead"`
	MediaIds       []*int  `json:"mediaIds"`
	VoiceActor     *Staff  `json:"voiceActor"`
	CharacterIds   []*int  `json:"characterIds"`
}

// User's year statistics
type YearStats struct {
	Year      *int `json:"year"`
	Amount    *int `json:"amount"`
	MeanScore *int `json:"meanScore"`
}

// Activity sort enums
type ActivitySort string

const (
	ActivitySortID     ActivitySort = "ID"
	ActivitySortIDDesc ActivitySort = "ID_DESC"
)

var AllActivitySort = []ActivitySort{
	ActivitySortID,
	ActivitySortIDDesc,
}

func (e ActivitySort) IsValid() bool {
	switch e {
	case ActivitySortID, ActivitySortIDDesc:
		return true
	}
	return false
}

func (e ActivitySort) String() string {
	return string(e)
}

func (e *ActivitySort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ActivitySort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ActivitySort", str)
	}
	return nil
}

func (e ActivitySort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Activity type enum.
type ActivityType string

const (
	// A text activity
	ActivityTypeText ActivityType = "TEXT"
	// A anime list update activity
	ActivityTypeAnimeList ActivityType = "ANIME_LIST"
	// A manga list update activity
	ActivityTypeMangaList ActivityType = "MANGA_LIST"
	// A text message activity sent to another user
	ActivityTypeMessage ActivityType = "MESSAGE"
	// Anime & Manga list update, only used in query arguments
	ActivityTypeMediaList ActivityType = "MEDIA_LIST"
)

var AllActivityType = []ActivityType{
	ActivityTypeText,
	ActivityTypeAnimeList,
	ActivityTypeMangaList,
	ActivityTypeMessage,
	ActivityTypeMediaList,
}

func (e ActivityType) IsValid() bool {
	switch e {
	case ActivityTypeText, ActivityTypeAnimeList, ActivityTypeMangaList, ActivityTypeMessage, ActivityTypeMediaList:
		return true
	}
	return false
}

func (e ActivityType) String() string {
	return string(e)
}

func (e *ActivityType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ActivityType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ActivityType", str)
	}
	return nil
}

func (e ActivityType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Airing schedule sort enums
type AiringSort string

const (
	AiringSortID          AiringSort = "ID"
	AiringSortIDDesc      AiringSort = "ID_DESC"
	AiringSortMediaID     AiringSort = "MEDIA_ID"
	AiringSortMediaIDDesc AiringSort = "MEDIA_ID_DESC"
	AiringSortTime        AiringSort = "TIME"
	AiringSortTimeDesc    AiringSort = "TIME_DESC"
	AiringSortEpisode     AiringSort = "EPISODE"
	AiringSortEpisodeDesc AiringSort = "EPISODE_DESC"
)

var AllAiringSort = []AiringSort{
	AiringSortID,
	AiringSortIDDesc,
	AiringSortMediaID,
	AiringSortMediaIDDesc,
	AiringSortTime,
	AiringSortTimeDesc,
	AiringSortEpisode,
	AiringSortEpisodeDesc,
}

func (e AiringSort) IsValid() bool {
	switch e {
	case AiringSortID, AiringSortIDDesc, AiringSortMediaID, AiringSortMediaIDDesc, AiringSortTime, AiringSortTimeDesc, AiringSortEpisode, AiringSortEpisodeDesc:
		return true
	}
	return false
}

func (e AiringSort) String() string {
	return string(e)
}

func (e *AiringSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AiringSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AiringSort", str)
	}
	return nil
}

func (e AiringSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The role the character plays in the media
type CharacterRole string

const (
	// A primary character role in the media
	CharacterRoleMain CharacterRole = "MAIN"
	// A supporting character role in the media
	CharacterRoleSupporting CharacterRole = "SUPPORTING"
	// A background character in the media
	CharacterRoleBackground CharacterRole = "BACKGROUND"
)

var AllCharacterRole = []CharacterRole{
	CharacterRoleMain,
	CharacterRoleSupporting,
	CharacterRoleBackground,
}

func (e CharacterRole) IsValid() bool {
	switch e {
	case CharacterRoleMain, CharacterRoleSupporting, CharacterRoleBackground:
		return true
	}
	return false
}

func (e CharacterRole) String() string {
	return string(e)
}

func (e *CharacterRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CharacterRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CharacterRole", str)
	}
	return nil
}

func (e CharacterRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Character sort enums
type CharacterSort string

const (
	CharacterSortID             CharacterSort = "ID"
	CharacterSortIDDesc         CharacterSort = "ID_DESC"
	CharacterSortRole           CharacterSort = "ROLE"
	CharacterSortRoleDesc       CharacterSort = "ROLE_DESC"
	CharacterSortSearchMatch    CharacterSort = "SEARCH_MATCH"
	CharacterSortFavourites     CharacterSort = "FAVOURITES"
	CharacterSortFavouritesDesc CharacterSort = "FAVOURITES_DESC"
)

var AllCharacterSort = []CharacterSort{
	CharacterSortID,
	CharacterSortIDDesc,
	CharacterSortRole,
	CharacterSortRoleDesc,
	CharacterSortSearchMatch,
	CharacterSortFavourites,
	CharacterSortFavouritesDesc,
}

func (e CharacterSort) IsValid() bool {
	switch e {
	case CharacterSortID, CharacterSortIDDesc, CharacterSortRole, CharacterSortRoleDesc, CharacterSortSearchMatch, CharacterSortFavourites, CharacterSortFavouritesDesc:
		return true
	}
	return false
}

func (e CharacterSort) String() string {
	return string(e)
}

func (e *CharacterSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CharacterSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CharacterSort", str)
	}
	return nil
}

func (e CharacterSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Types that can be liked
type LikeableType string

const (
	LikeableTypeThread        LikeableType = "THREAD"
	LikeableTypeThreadComment LikeableType = "THREAD_COMMENT"
	LikeableTypeActivity      LikeableType = "ACTIVITY"
	LikeableTypeActivityReply LikeableType = "ACTIVITY_REPLY"
)

var AllLikeableType = []LikeableType{
	LikeableTypeThread,
	LikeableTypeThreadComment,
	LikeableTypeActivity,
	LikeableTypeActivityReply,
}

func (e LikeableType) IsValid() bool {
	switch e {
	case LikeableTypeThread, LikeableTypeThreadComment, LikeableTypeActivity, LikeableTypeActivityReply:
		return true
	}
	return false
}

func (e LikeableType) String() string {
	return string(e)
}

func (e *LikeableType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LikeableType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LikeableType", str)
	}
	return nil
}

func (e LikeableType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The format the media was released in
type MediaFormat string

const (
	// Anime broadcast on television
	MediaFormatTv MediaFormat = "TV"
	// Anime which are under 15 minutes in length and broadcast on television
	MediaFormatTvShort MediaFormat = "TV_SHORT"
	// Anime movies with a theatrical release
	MediaFormatMovie MediaFormat = "MOVIE"
	// Special episodes that have been included in DVD/Blu-ray releases, picture dramas, pilots, etc
	MediaFormatSpecial MediaFormat = "SPECIAL"
	// (Original Video Animation) Anime that have been released directly on DVD/Blu-ray without originally going through a theatrical release or television broadcast
	MediaFormatOva MediaFormat = "OVA"
	// (Original Net Animation) Anime that have been originally released online or are only available through streaming services.
	MediaFormatOna MediaFormat = "ONA"
	// Short anime released as a music video
	MediaFormatMusic MediaFormat = "MUSIC"
	// Professionally published manga with more than one chapter
	MediaFormatManga MediaFormat = "MANGA"
	// Written books released as a series of light novels
	MediaFormatNovel MediaFormat = "NOVEL"
	// Manga with just one chapter
	MediaFormatOneShot MediaFormat = "ONE_SHOT"
)

var AllMediaFormat = []MediaFormat{
	MediaFormatTv,
	MediaFormatTvShort,
	MediaFormatMovie,
	MediaFormatSpecial,
	MediaFormatOva,
	MediaFormatOna,
	MediaFormatMusic,
	MediaFormatManga,
	MediaFormatNovel,
	MediaFormatOneShot,
}

func (e MediaFormat) IsValid() bool {
	switch e {
	case MediaFormatTv, MediaFormatTvShort, MediaFormatMovie, MediaFormatSpecial, MediaFormatOva, MediaFormatOna, MediaFormatMusic, MediaFormatManga, MediaFormatNovel, MediaFormatOneShot:
		return true
	}
	return false
}

func (e MediaFormat) String() string {
	return string(e)
}

func (e *MediaFormat) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaFormat(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaFormat", str)
	}
	return nil
}

func (e MediaFormat) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Media list sort enums
type MediaListSort string

const (
	MediaListSortMediaID               MediaListSort = "MEDIA_ID"
	MediaListSortMediaIDDesc           MediaListSort = "MEDIA_ID_DESC"
	MediaListSortScore                 MediaListSort = "SCORE"
	MediaListSortScoreDesc             MediaListSort = "SCORE_DESC"
	MediaListSortStatus                MediaListSort = "STATUS"
	MediaListSortStatusDesc            MediaListSort = "STATUS_DESC"
	MediaListSortProgress              MediaListSort = "PROGRESS"
	MediaListSortProgressDesc          MediaListSort = "PROGRESS_DESC"
	MediaListSortProgressVolumes       MediaListSort = "PROGRESS_VOLUMES"
	MediaListSortProgressVolumesDesc   MediaListSort = "PROGRESS_VOLUMES_DESC"
	MediaListSortRepeat                MediaListSort = "REPEAT"
	MediaListSortRepeatDesc            MediaListSort = "REPEAT_DESC"
	MediaListSortPriority              MediaListSort = "PRIORITY"
	MediaListSortPriorityDesc          MediaListSort = "PRIORITY_DESC"
	MediaListSortStartedOn             MediaListSort = "STARTED_ON"
	MediaListSortStartedOnDesc         MediaListSort = "STARTED_ON_DESC"
	MediaListSortFinishedOn            MediaListSort = "FINISHED_ON"
	MediaListSortFinishedOnDesc        MediaListSort = "FINISHED_ON_DESC"
	MediaListSortAddedTime             MediaListSort = "ADDED_TIME"
	MediaListSortAddedTimeDesc         MediaListSort = "ADDED_TIME_DESC"
	MediaListSortUpdatedTime           MediaListSort = "UPDATED_TIME"
	MediaListSortUpdatedTimeDesc       MediaListSort = "UPDATED_TIME_DESC"
	MediaListSortMediaTitleRomaji      MediaListSort = "MEDIA_TITLE_ROMAJI"
	MediaListSortMediaTitleRomajiDesc  MediaListSort = "MEDIA_TITLE_ROMAJI_DESC"
	MediaListSortMediaTitleEnglish     MediaListSort = "MEDIA_TITLE_ENGLISH"
	MediaListSortMediaTitleEnglishDesc MediaListSort = "MEDIA_TITLE_ENGLISH_DESC"
	MediaListSortMediaTitleNative      MediaListSort = "MEDIA_TITLE_NATIVE"
	MediaListSortMediaTitleNativeDesc  MediaListSort = "MEDIA_TITLE_NATIVE_DESC"
	MediaListSortMediaPopularity       MediaListSort = "MEDIA_POPULARITY"
	MediaListSortMediaPopularityDesc   MediaListSort = "MEDIA_POPULARITY_DESC"
)

var AllMediaListSort = []MediaListSort{
	MediaListSortMediaID,
	MediaListSortMediaIDDesc,
	MediaListSortScore,
	MediaListSortScoreDesc,
	MediaListSortStatus,
	MediaListSortStatusDesc,
	MediaListSortProgress,
	MediaListSortProgressDesc,
	MediaListSortProgressVolumes,
	MediaListSortProgressVolumesDesc,
	MediaListSortRepeat,
	MediaListSortRepeatDesc,
	MediaListSortPriority,
	MediaListSortPriorityDesc,
	MediaListSortStartedOn,
	MediaListSortStartedOnDesc,
	MediaListSortFinishedOn,
	MediaListSortFinishedOnDesc,
	MediaListSortAddedTime,
	MediaListSortAddedTimeDesc,
	MediaListSortUpdatedTime,
	MediaListSortUpdatedTimeDesc,
	MediaListSortMediaTitleRomaji,
	MediaListSortMediaTitleRomajiDesc,
	MediaListSortMediaTitleEnglish,
	MediaListSortMediaTitleEnglishDesc,
	MediaListSortMediaTitleNative,
	MediaListSortMediaTitleNativeDesc,
	MediaListSortMediaPopularity,
	MediaListSortMediaPopularityDesc,
}

func (e MediaListSort) IsValid() bool {
	switch e {
	case MediaListSortMediaID, MediaListSortMediaIDDesc, MediaListSortScore, MediaListSortScoreDesc, MediaListSortStatus, MediaListSortStatusDesc, MediaListSortProgress, MediaListSortProgressDesc, MediaListSortProgressVolumes, MediaListSortProgressVolumesDesc, MediaListSortRepeat, MediaListSortRepeatDesc, MediaListSortPriority, MediaListSortPriorityDesc, MediaListSortStartedOn, MediaListSortStartedOnDesc, MediaListSortFinishedOn, MediaListSortFinishedOnDesc, MediaListSortAddedTime, MediaListSortAddedTimeDesc, MediaListSortUpdatedTime, MediaListSortUpdatedTimeDesc, MediaListSortMediaTitleRomaji, MediaListSortMediaTitleRomajiDesc, MediaListSortMediaTitleEnglish, MediaListSortMediaTitleEnglishDesc, MediaListSortMediaTitleNative, MediaListSortMediaTitleNativeDesc, MediaListSortMediaPopularity, MediaListSortMediaPopularityDesc:
		return true
	}
	return false
}

func (e MediaListSort) String() string {
	return string(e)
}

func (e *MediaListSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaListSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaListSort", str)
	}
	return nil
}

func (e MediaListSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Media list watching/reading status enum.
type MediaListStatus string

const (
	// Currently watching/reading
	MediaListStatusCurrent MediaListStatus = "CURRENT"
	// Planning to watch/read
	MediaListStatusPlanning MediaListStatus = "PLANNING"
	// Finished watching/reading
	MediaListStatusCompleted MediaListStatus = "COMPLETED"
	// Stopped watching/reading before completing
	MediaListStatusDropped MediaListStatus = "DROPPED"
	// Paused watching/reading
	MediaListStatusPaused MediaListStatus = "PAUSED"
	// Re-watching/reading
	MediaListStatusRepeating MediaListStatus = "REPEATING"
)

var AllMediaListStatus = []MediaListStatus{
	MediaListStatusCurrent,
	MediaListStatusPlanning,
	MediaListStatusCompleted,
	MediaListStatusDropped,
	MediaListStatusPaused,
	MediaListStatusRepeating,
}

func (e MediaListStatus) IsValid() bool {
	switch e {
	case MediaListStatusCurrent, MediaListStatusPlanning, MediaListStatusCompleted, MediaListStatusDropped, MediaListStatusPaused, MediaListStatusRepeating:
		return true
	}
	return false
}

func (e MediaListStatus) String() string {
	return string(e)
}

func (e *MediaListStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaListStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaListStatus", str)
	}
	return nil
}

func (e MediaListStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The type of ranking
type MediaRankType string

const (
	// Ranking is based on the media's ratings/score
	MediaRankTypeRated MediaRankType = "RATED"
	// Ranking is based on the media's popularity
	MediaRankTypePopular MediaRankType = "POPULAR"
)

var AllMediaRankType = []MediaRankType{
	MediaRankTypeRated,
	MediaRankTypePopular,
}

func (e MediaRankType) IsValid() bool {
	switch e {
	case MediaRankTypeRated, MediaRankTypePopular:
		return true
	}
	return false
}

func (e MediaRankType) String() string {
	return string(e)
}

func (e *MediaRankType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaRankType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaRankType", str)
	}
	return nil
}

func (e MediaRankType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Type of relation media has to its parent.
type MediaRelation string

const (
	// An adaption of this media into a different format
	MediaRelationAdaptation MediaRelation = "ADAPTATION"
	// Released before the relation
	MediaRelationPrequel MediaRelation = "PREQUEL"
	// Released after the relation
	MediaRelationSequel MediaRelation = "SEQUEL"
	// The media a side story is from
	MediaRelationParent MediaRelation = "PARENT"
	// A side story of the parent media
	MediaRelationSideStory MediaRelation = "SIDE_STORY"
	// Shares at least 1 character
	MediaRelationCharacter MediaRelation = "CHARACTER"
	// A shortened and summarized version
	MediaRelationSummary MediaRelation = "SUMMARY"
	// An alternative version of the same media
	MediaRelationAlternative MediaRelation = "ALTERNATIVE"
	// An alternative version of the media with a different primary focus
	MediaRelationSpinOff MediaRelation = "SPIN_OFF"
	// Other
	MediaRelationOther MediaRelation = "OTHER"
	// Version 2 only. The source material the media was adapted from
	MediaRelationSource MediaRelation = "SOURCE"
	// Version 2 only.
	MediaRelationCompilation MediaRelation = "COMPILATION"
	// Version 2 only.
	MediaRelationContains MediaRelation = "CONTAINS"
)

var AllMediaRelation = []MediaRelation{
	MediaRelationAdaptation,
	MediaRelationPrequel,
	MediaRelationSequel,
	MediaRelationParent,
	MediaRelationSideStory,
	MediaRelationCharacter,
	MediaRelationSummary,
	MediaRelationAlternative,
	MediaRelationSpinOff,
	MediaRelationOther,
	MediaRelationSource,
	MediaRelationCompilation,
	MediaRelationContains,
}

func (e MediaRelation) IsValid() bool {
	switch e {
	case MediaRelationAdaptation, MediaRelationPrequel, MediaRelationSequel, MediaRelationParent, MediaRelationSideStory, MediaRelationCharacter, MediaRelationSummary, MediaRelationAlternative, MediaRelationSpinOff, MediaRelationOther, MediaRelationSource, MediaRelationCompilation, MediaRelationContains:
		return true
	}
	return false
}

func (e MediaRelation) String() string {
	return string(e)
}

func (e *MediaRelation) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaRelation(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaRelation", str)
	}
	return nil
}

func (e MediaRelation) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MediaSeason string

const (
	// Months December to February
	MediaSeasonWinter MediaSeason = "WINTER"
	// Months March to May
	MediaSeasonSpring MediaSeason = "SPRING"
	// Months June to August
	MediaSeasonSummer MediaSeason = "SUMMER"
	// Months September to November
	MediaSeasonFall MediaSeason = "FALL"
)

var AllMediaSeason = []MediaSeason{
	MediaSeasonWinter,
	MediaSeasonSpring,
	MediaSeasonSummer,
	MediaSeasonFall,
}

func (e MediaSeason) IsValid() bool {
	switch e {
	case MediaSeasonWinter, MediaSeasonSpring, MediaSeasonSummer, MediaSeasonFall:
		return true
	}
	return false
}

func (e MediaSeason) String() string {
	return string(e)
}

func (e *MediaSeason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaSeason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaSeason", str)
	}
	return nil
}

func (e MediaSeason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Media sort enums
type MediaSort string

const (
	MediaSortID               MediaSort = "ID"
	MediaSortIDDesc           MediaSort = "ID_DESC"
	MediaSortTitleRomaji      MediaSort = "TITLE_ROMAJI"
	MediaSortTitleRomajiDesc  MediaSort = "TITLE_ROMAJI_DESC"
	MediaSortTitleEnglish     MediaSort = "TITLE_ENGLISH"
	MediaSortTitleEnglishDesc MediaSort = "TITLE_ENGLISH_DESC"
	MediaSortTitleNative      MediaSort = "TITLE_NATIVE"
	MediaSortTitleNativeDesc  MediaSort = "TITLE_NATIVE_DESC"
	MediaSortType             MediaSort = "TYPE"
	MediaSortTypeDesc         MediaSort = "TYPE_DESC"
	MediaSortFormat           MediaSort = "FORMAT"
	MediaSortFormatDesc       MediaSort = "FORMAT_DESC"
	MediaSortStartDate        MediaSort = "START_DATE"
	MediaSortStartDateDesc    MediaSort = "START_DATE_DESC"
	MediaSortEndDate          MediaSort = "END_DATE"
	MediaSortEndDateDesc      MediaSort = "END_DATE_DESC"
	MediaSortScore            MediaSort = "SCORE"
	MediaSortScoreDesc        MediaSort = "SCORE_DESC"
	MediaSortPopularity       MediaSort = "POPULARITY"
	MediaSortPopularityDesc   MediaSort = "POPULARITY_DESC"
	MediaSortTrending         MediaSort = "TRENDING"
	MediaSortTrendingDesc     MediaSort = "TRENDING_DESC"
	MediaSortEpisodes         MediaSort = "EPISODES"
	MediaSortEpisodesDesc     MediaSort = "EPISODES_DESC"
	MediaSortDuration         MediaSort = "DURATION"
	MediaSortDurationDesc     MediaSort = "DURATION_DESC"
	MediaSortStatus           MediaSort = "STATUS"
	MediaSortStatusDesc       MediaSort = "STATUS_DESC"
	MediaSortChapters         MediaSort = "CHAPTERS"
	MediaSortChaptersDesc     MediaSort = "CHAPTERS_DESC"
	MediaSortVolumes          MediaSort = "VOLUMES"
	MediaSortVolumesDesc      MediaSort = "VOLUMES_DESC"
	MediaSortUpdatedAt        MediaSort = "UPDATED_AT"
	MediaSortUpdatedAtDesc    MediaSort = "UPDATED_AT_DESC"
	MediaSortSearchMatch      MediaSort = "SEARCH_MATCH"
	MediaSortFavourites       MediaSort = "FAVOURITES"
	MediaSortFavouritesDesc   MediaSort = "FAVOURITES_DESC"
)

var AllMediaSort = []MediaSort{
	MediaSortID,
	MediaSortIDDesc,
	MediaSortTitleRomaji,
	MediaSortTitleRomajiDesc,
	MediaSortTitleEnglish,
	MediaSortTitleEnglishDesc,
	MediaSortTitleNative,
	MediaSortTitleNativeDesc,
	MediaSortType,
	MediaSortTypeDesc,
	MediaSortFormat,
	MediaSortFormatDesc,
	MediaSortStartDate,
	MediaSortStartDateDesc,
	MediaSortEndDate,
	MediaSortEndDateDesc,
	MediaSortScore,
	MediaSortScoreDesc,
	MediaSortPopularity,
	MediaSortPopularityDesc,
	MediaSortTrending,
	MediaSortTrendingDesc,
	MediaSortEpisodes,
	MediaSortEpisodesDesc,
	MediaSortDuration,
	MediaSortDurationDesc,
	MediaSortStatus,
	MediaSortStatusDesc,
	MediaSortChapters,
	MediaSortChaptersDesc,
	MediaSortVolumes,
	MediaSortVolumesDesc,
	MediaSortUpdatedAt,
	MediaSortUpdatedAtDesc,
	MediaSortSearchMatch,
	MediaSortFavourites,
	MediaSortFavouritesDesc,
}

func (e MediaSort) IsValid() bool {
	switch e {
	case MediaSortID, MediaSortIDDesc, MediaSortTitleRomaji, MediaSortTitleRomajiDesc, MediaSortTitleEnglish, MediaSortTitleEnglishDesc, MediaSortTitleNative, MediaSortTitleNativeDesc, MediaSortType, MediaSortTypeDesc, MediaSortFormat, MediaSortFormatDesc, MediaSortStartDate, MediaSortStartDateDesc, MediaSortEndDate, MediaSortEndDateDesc, MediaSortScore, MediaSortScoreDesc, MediaSortPopularity, MediaSortPopularityDesc, MediaSortTrending, MediaSortTrendingDesc, MediaSortEpisodes, MediaSortEpisodesDesc, MediaSortDuration, MediaSortDurationDesc, MediaSortStatus, MediaSortStatusDesc, MediaSortChapters, MediaSortChaptersDesc, MediaSortVolumes, MediaSortVolumesDesc, MediaSortUpdatedAt, MediaSortUpdatedAtDesc, MediaSortSearchMatch, MediaSortFavourites, MediaSortFavouritesDesc:
		return true
	}
	return false
}

func (e MediaSort) String() string {
	return string(e)
}

func (e *MediaSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaSort", str)
	}
	return nil
}

func (e MediaSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Source type the media was adapted from
type MediaSource string

const (
	// An original production not based of another work
	MediaSourceOriginal MediaSource = "ORIGINAL"
	// Asian comic book
	MediaSourceManga MediaSource = "MANGA"
	// Written work published in volumes
	MediaSourceLightNovel MediaSource = "LIGHT_NOVEL"
	// Video game driven primary by text and narrative
	MediaSourceVisualNovel MediaSource = "VISUAL_NOVEL"
	// Video game
	MediaSourceVideoGame MediaSource = "VIDEO_GAME"
	// Other
	MediaSourceOther MediaSource = "OTHER"
	// Version 2 only. Written works not published in volumes
	MediaSourceNovel MediaSource = "NOVEL"
	// Version 2 only. Self-published works
	MediaSourceDoujinshi MediaSource = "DOUJINSHI"
	// Version 2 only. Japanese Anime
	MediaSourceAnime MediaSource = "ANIME"
)

var AllMediaSource = []MediaSource{
	MediaSourceOriginal,
	MediaSourceManga,
	MediaSourceLightNovel,
	MediaSourceVisualNovel,
	MediaSourceVideoGame,
	MediaSourceOther,
	MediaSourceNovel,
	MediaSourceDoujinshi,
	MediaSourceAnime,
}

func (e MediaSource) IsValid() bool {
	switch e {
	case MediaSourceOriginal, MediaSourceManga, MediaSourceLightNovel, MediaSourceVisualNovel, MediaSourceVideoGame, MediaSourceOther, MediaSourceNovel, MediaSourceDoujinshi, MediaSourceAnime:
		return true
	}
	return false
}

func (e MediaSource) String() string {
	return string(e)
}

func (e *MediaSource) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaSource(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaSource", str)
	}
	return nil
}

func (e MediaSource) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The current releasing status of the media
type MediaStatus string

const (
	// Has completed and is no longer being released
	MediaStatusFinished MediaStatus = "FINISHED"
	// Currently releasing
	MediaStatusReleasing MediaStatus = "RELEASING"
	// To be released at a later date
	MediaStatusNotYetReleased MediaStatus = "NOT_YET_RELEASED"
	// Ended before the work could be finished
	MediaStatusCancelled MediaStatus = "CANCELLED"
)

var AllMediaStatus = []MediaStatus{
	MediaStatusFinished,
	MediaStatusReleasing,
	MediaStatusNotYetReleased,
	MediaStatusCancelled,
}

func (e MediaStatus) IsValid() bool {
	switch e {
	case MediaStatusFinished, MediaStatusReleasing, MediaStatusNotYetReleased, MediaStatusCancelled:
		return true
	}
	return false
}

func (e MediaStatus) String() string {
	return string(e)
}

func (e *MediaStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaStatus", str)
	}
	return nil
}

func (e MediaStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Media trend sort enums
type MediaTrendSort string

const (
	MediaTrendSortID             MediaTrendSort = "ID"
	MediaTrendSortIDDesc         MediaTrendSort = "ID_DESC"
	MediaTrendSortMediaID        MediaTrendSort = "MEDIA_ID"
	MediaTrendSortMediaIDDesc    MediaTrendSort = "MEDIA_ID_DESC"
	MediaTrendSortDate           MediaTrendSort = "DATE"
	MediaTrendSortDateDesc       MediaTrendSort = "DATE_DESC"
	MediaTrendSortScore          MediaTrendSort = "SCORE"
	MediaTrendSortScoreDesc      MediaTrendSort = "SCORE_DESC"
	MediaTrendSortPopularity     MediaTrendSort = "POPULARITY"
	MediaTrendSortPopularityDesc MediaTrendSort = "POPULARITY_DESC"
	MediaTrendSortTrending       MediaTrendSort = "TRENDING"
	MediaTrendSortTrendingDesc   MediaTrendSort = "TRENDING_DESC"
	MediaTrendSortEpisode        MediaTrendSort = "EPISODE"
	MediaTrendSortEpisodeDesc    MediaTrendSort = "EPISODE_DESC"
)

var AllMediaTrendSort = []MediaTrendSort{
	MediaTrendSortID,
	MediaTrendSortIDDesc,
	MediaTrendSortMediaID,
	MediaTrendSortMediaIDDesc,
	MediaTrendSortDate,
	MediaTrendSortDateDesc,
	MediaTrendSortScore,
	MediaTrendSortScoreDesc,
	MediaTrendSortPopularity,
	MediaTrendSortPopularityDesc,
	MediaTrendSortTrending,
	MediaTrendSortTrendingDesc,
	MediaTrendSortEpisode,
	MediaTrendSortEpisodeDesc,
}

func (e MediaTrendSort) IsValid() bool {
	switch e {
	case MediaTrendSortID, MediaTrendSortIDDesc, MediaTrendSortMediaID, MediaTrendSortMediaIDDesc, MediaTrendSortDate, MediaTrendSortDateDesc, MediaTrendSortScore, MediaTrendSortScoreDesc, MediaTrendSortPopularity, MediaTrendSortPopularityDesc, MediaTrendSortTrending, MediaTrendSortTrendingDesc, MediaTrendSortEpisode, MediaTrendSortEpisodeDesc:
		return true
	}
	return false
}

func (e MediaTrendSort) String() string {
	return string(e)
}

func (e *MediaTrendSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaTrendSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaTrendSort", str)
	}
	return nil
}

func (e MediaTrendSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Media type enum, anime or manga.
type MediaType string

const (
	// Japanese Anime
	MediaTypeAnime MediaType = "ANIME"
	// Asian comic
	MediaTypeManga MediaType = "MANGA"
)

var AllMediaType = []MediaType{
	MediaTypeAnime,
	MediaTypeManga,
}

func (e MediaType) IsValid() bool {
	switch e {
	case MediaTypeAnime, MediaTypeManga:
		return true
	}
	return false
}

func (e MediaType) String() string {
	return string(e)
}

func (e *MediaType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaType", str)
	}
	return nil
}

func (e MediaType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ModActionType string

const (
	ModActionTypeNote   ModActionType = "NOTE"
	ModActionTypeBan    ModActionType = "BAN"
	ModActionTypeDelete ModActionType = "DELETE"
	ModActionTypeEdit   ModActionType = "EDIT"
	ModActionTypeExpire ModActionType = "EXPIRE"
	ModActionTypeReport ModActionType = "REPORT"
	ModActionTypeReset  ModActionType = "RESET"
	ModActionTypeAnon   ModActionType = "ANON"
)

var AllModActionType = []ModActionType{
	ModActionTypeNote,
	ModActionTypeBan,
	ModActionTypeDelete,
	ModActionTypeEdit,
	ModActionTypeExpire,
	ModActionTypeReport,
	ModActionTypeReset,
	ModActionTypeAnon,
}

func (e ModActionType) IsValid() bool {
	switch e {
	case ModActionTypeNote, ModActionTypeBan, ModActionTypeDelete, ModActionTypeEdit, ModActionTypeExpire, ModActionTypeReport, ModActionTypeReset, ModActionTypeAnon:
		return true
	}
	return false
}

func (e ModActionType) String() string {
	return string(e)
}

func (e *ModActionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ModActionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ModActionType", str)
	}
	return nil
}

func (e ModActionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Notification type enum
type NotificationType string

const (
	// A user has sent you message
	NotificationTypeActivityMessage NotificationType = "ACTIVITY_MESSAGE"
	// A user has replied to your activity
	NotificationTypeActivityReply NotificationType = "ACTIVITY_REPLY"
	// A user has followed you
	NotificationTypeFollowing NotificationType = "FOLLOWING"
	// A user has mentioned you in their activity
	NotificationTypeActivityMention NotificationType = "ACTIVITY_MENTION"
	// A user has mentioned you in a forum comment
	NotificationTypeThreadCommentMention NotificationType = "THREAD_COMMENT_MENTION"
	// A user has commented in one of your subscribed forum threads
	NotificationTypeThreadSubscribed NotificationType = "THREAD_SUBSCRIBED"
	// A user has replied to your forum comment
	NotificationTypeThreadCommentReply NotificationType = "THREAD_COMMENT_REPLY"
	// An anime you are currently watching has aired
	NotificationTypeAiring NotificationType = "AIRING"
	// A user has liked your activity
	NotificationTypeActivityLike NotificationType = "ACTIVITY_LIKE"
	// A user has liked your activity reply
	NotificationTypeActivityReplyLike NotificationType = "ACTIVITY_REPLY_LIKE"
	// A user has liked your forum thread
	NotificationTypeThreadLike NotificationType = "THREAD_LIKE"
	// A user has liked your forum comment
	NotificationTypeThreadCommentLike NotificationType = "THREAD_COMMENT_LIKE"
	// A user has replied to activity you have also replied to
	NotificationTypeActivityReplySubscribed NotificationType = "ACTIVITY_REPLY_SUBSCRIBED"
	// A new anime or manga has been added to the site where its related media is on the user's list
	NotificationTypeRelatedMediaAddition NotificationType = "RELATED_MEDIA_ADDITION"
)

var AllNotificationType = []NotificationType{
	NotificationTypeActivityMessage,
	NotificationTypeActivityReply,
	NotificationTypeFollowing,
	NotificationTypeActivityMention,
	NotificationTypeThreadCommentMention,
	NotificationTypeThreadSubscribed,
	NotificationTypeThreadCommentReply,
	NotificationTypeAiring,
	NotificationTypeActivityLike,
	NotificationTypeActivityReplyLike,
	NotificationTypeThreadLike,
	NotificationTypeThreadCommentLike,
	NotificationTypeActivityReplySubscribed,
	NotificationTypeRelatedMediaAddition,
}

func (e NotificationType) IsValid() bool {
	switch e {
	case NotificationTypeActivityMessage, NotificationTypeActivityReply, NotificationTypeFollowing, NotificationTypeActivityMention, NotificationTypeThreadCommentMention, NotificationTypeThreadSubscribed, NotificationTypeThreadCommentReply, NotificationTypeAiring, NotificationTypeActivityLike, NotificationTypeActivityReplyLike, NotificationTypeThreadLike, NotificationTypeThreadCommentLike, NotificationTypeActivityReplySubscribed, NotificationTypeRelatedMediaAddition:
		return true
	}
	return false
}

func (e NotificationType) String() string {
	return string(e)
}

func (e *NotificationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationType", str)
	}
	return nil
}

func (e NotificationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Recommendation rating enums
type RecommendationRating string

const (
	RecommendationRatingNoRating RecommendationRating = "NO_RATING"
	RecommendationRatingRateUp   RecommendationRating = "RATE_UP"
	RecommendationRatingRateDown RecommendationRating = "RATE_DOWN"
)

var AllRecommendationRating = []RecommendationRating{
	RecommendationRatingNoRating,
	RecommendationRatingRateUp,
	RecommendationRatingRateDown,
}

func (e RecommendationRating) IsValid() bool {
	switch e {
	case RecommendationRatingNoRating, RecommendationRatingRateUp, RecommendationRatingRateDown:
		return true
	}
	return false
}

func (e RecommendationRating) String() string {
	return string(e)
}

func (e *RecommendationRating) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RecommendationRating(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RecommendationRating", str)
	}
	return nil
}

func (e RecommendationRating) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Recommendation sort enums
type RecommendationSort string

const (
	RecommendationSortID         RecommendationSort = "ID"
	RecommendationSortIDDesc     RecommendationSort = "ID_DESC"
	RecommendationSortRating     RecommendationSort = "RATING"
	RecommendationSortRatingDesc RecommendationSort = "RATING_DESC"
)

var AllRecommendationSort = []RecommendationSort{
	RecommendationSortID,
	RecommendationSortIDDesc,
	RecommendationSortRating,
	RecommendationSortRatingDesc,
}

func (e RecommendationSort) IsValid() bool {
	switch e {
	case RecommendationSortID, RecommendationSortIDDesc, RecommendationSortRating, RecommendationSortRatingDesc:
		return true
	}
	return false
}

func (e RecommendationSort) String() string {
	return string(e)
}

func (e *RecommendationSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RecommendationSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RecommendationSort", str)
	}
	return nil
}

func (e RecommendationSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Review rating enums
type ReviewRating string

const (
	ReviewRatingNoVote   ReviewRating = "NO_VOTE"
	ReviewRatingUpVote   ReviewRating = "UP_VOTE"
	ReviewRatingDownVote ReviewRating = "DOWN_VOTE"
)

var AllReviewRating = []ReviewRating{
	ReviewRatingNoVote,
	ReviewRatingUpVote,
	ReviewRatingDownVote,
}

func (e ReviewRating) IsValid() bool {
	switch e {
	case ReviewRatingNoVote, ReviewRatingUpVote, ReviewRatingDownVote:
		return true
	}
	return false
}

func (e ReviewRating) String() string {
	return string(e)
}

func (e *ReviewRating) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReviewRating(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReviewRating", str)
	}
	return nil
}

func (e ReviewRating) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Review sort enums
type ReviewSort string

const (
	ReviewSortID            ReviewSort = "ID"
	ReviewSortIDDesc        ReviewSort = "ID_DESC"
	ReviewSortScore         ReviewSort = "SCORE"
	ReviewSortScoreDesc     ReviewSort = "SCORE_DESC"
	ReviewSortRating        ReviewSort = "RATING"
	ReviewSortRatingDesc    ReviewSort = "RATING_DESC"
	ReviewSortCreatedAt     ReviewSort = "CREATED_AT"
	ReviewSortCreatedAtDesc ReviewSort = "CREATED_AT_DESC"
	ReviewSortUpdatedAt     ReviewSort = "UPDATED_AT"
	ReviewSortUpdatedAtDesc ReviewSort = "UPDATED_AT_DESC"
)

var AllReviewSort = []ReviewSort{
	ReviewSortID,
	ReviewSortIDDesc,
	ReviewSortScore,
	ReviewSortScoreDesc,
	ReviewSortRating,
	ReviewSortRatingDesc,
	ReviewSortCreatedAt,
	ReviewSortCreatedAtDesc,
	ReviewSortUpdatedAt,
	ReviewSortUpdatedAtDesc,
}

func (e ReviewSort) IsValid() bool {
	switch e {
	case ReviewSortID, ReviewSortIDDesc, ReviewSortScore, ReviewSortScoreDesc, ReviewSortRating, ReviewSortRatingDesc, ReviewSortCreatedAt, ReviewSortCreatedAtDesc, ReviewSortUpdatedAt, ReviewSortUpdatedAtDesc:
		return true
	}
	return false
}

func (e ReviewSort) String() string {
	return string(e)
}

func (e *ReviewSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReviewSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReviewSort", str)
	}
	return nil
}

func (e ReviewSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Revision history actions
type RevisionHistoryAction string

const (
	RevisionHistoryActionCreate RevisionHistoryAction = "CREATE"
	RevisionHistoryActionEdit   RevisionHistoryAction = "EDIT"
)

var AllRevisionHistoryAction = []RevisionHistoryAction{
	RevisionHistoryActionCreate,
	RevisionHistoryActionEdit,
}

func (e RevisionHistoryAction) IsValid() bool {
	switch e {
	case RevisionHistoryActionCreate, RevisionHistoryActionEdit:
		return true
	}
	return false
}

func (e RevisionHistoryAction) String() string {
	return string(e)
}

func (e *RevisionHistoryAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RevisionHistoryAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RevisionHistoryAction", str)
	}
	return nil
}

func (e RevisionHistoryAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Media list scoring type
type ScoreFormat string

const (
	// An integer from 0-100
	ScoreFormatPoint100 ScoreFormat = "POINT_100"
	// A float from 0-10 with 1 decimal place
	ScoreFormatPoint10Decimal ScoreFormat = "POINT_10_DECIMAL"
	// An integer from 0-10
	ScoreFormatPoint10 ScoreFormat = "POINT_10"
	// An integer from 0-5. Should be represented in Stars
	ScoreFormatPoint5 ScoreFormat = "POINT_5"
	// An integer from 0-3. Should be represented in Smileys. 0 => No Score, 1 => :(, 2 => :|, 3 => :)
	ScoreFormatPoint3 ScoreFormat = "POINT_3"
)

var AllScoreFormat = []ScoreFormat{
	ScoreFormatPoint100,
	ScoreFormatPoint10Decimal,
	ScoreFormatPoint10,
	ScoreFormatPoint5,
	ScoreFormatPoint3,
}

func (e ScoreFormat) IsValid() bool {
	switch e {
	case ScoreFormatPoint100, ScoreFormatPoint10Decimal, ScoreFormatPoint10, ScoreFormatPoint5, ScoreFormatPoint3:
		return true
	}
	return false
}

func (e ScoreFormat) String() string {
	return string(e)
}

func (e *ScoreFormat) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ScoreFormat(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ScoreFormat", str)
	}
	return nil
}

func (e ScoreFormat) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Site trend sort enums
type SiteTrendSort string

const (
	SiteTrendSortDate       SiteTrendSort = "DATE"
	SiteTrendSortDateDesc   SiteTrendSort = "DATE_DESC"
	SiteTrendSortCount      SiteTrendSort = "COUNT"
	SiteTrendSortCountDesc  SiteTrendSort = "COUNT_DESC"
	SiteTrendSortChange     SiteTrendSort = "CHANGE"
	SiteTrendSortChangeDesc SiteTrendSort = "CHANGE_DESC"
)

var AllSiteTrendSort = []SiteTrendSort{
	SiteTrendSortDate,
	SiteTrendSortDateDesc,
	SiteTrendSortCount,
	SiteTrendSortCountDesc,
	SiteTrendSortChange,
	SiteTrendSortChangeDesc,
}

func (e SiteTrendSort) IsValid() bool {
	switch e {
	case SiteTrendSortDate, SiteTrendSortDateDesc, SiteTrendSortCount, SiteTrendSortCountDesc, SiteTrendSortChange, SiteTrendSortChangeDesc:
		return true
	}
	return false
}

func (e SiteTrendSort) String() string {
	return string(e)
}

func (e *SiteTrendSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SiteTrendSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SiteTrendSort", str)
	}
	return nil
}

func (e SiteTrendSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The primary language of the voice actor
type StaffLanguage string

const (
	// Japanese
	StaffLanguageJapanese StaffLanguage = "JAPANESE"
	// English
	StaffLanguageEnglish StaffLanguage = "ENGLISH"
	// Korean
	StaffLanguageKorean StaffLanguage = "KOREAN"
	// Italian
	StaffLanguageItalian StaffLanguage = "ITALIAN"
	// Spanish
	StaffLanguageSpanish StaffLanguage = "SPANISH"
	// Portuguese
	StaffLanguagePortuguese StaffLanguage = "PORTUGUESE"
	// French
	StaffLanguageFrench StaffLanguage = "FRENCH"
	// German
	StaffLanguageGerman StaffLanguage = "GERMAN"
	// Hebrew
	StaffLanguageHebrew StaffLanguage = "HEBREW"
	// Hungarian
	StaffLanguageHungarian StaffLanguage = "HUNGARIAN"
)

var AllStaffLanguage = []StaffLanguage{
	StaffLanguageJapanese,
	StaffLanguageEnglish,
	StaffLanguageKorean,
	StaffLanguageItalian,
	StaffLanguageSpanish,
	StaffLanguagePortuguese,
	StaffLanguageFrench,
	StaffLanguageGerman,
	StaffLanguageHebrew,
	StaffLanguageHungarian,
}

func (e StaffLanguage) IsValid() bool {
	switch e {
	case StaffLanguageJapanese, StaffLanguageEnglish, StaffLanguageKorean, StaffLanguageItalian, StaffLanguageSpanish, StaffLanguagePortuguese, StaffLanguageFrench, StaffLanguageGerman, StaffLanguageHebrew, StaffLanguageHungarian:
		return true
	}
	return false
}

func (e StaffLanguage) String() string {
	return string(e)
}

func (e *StaffLanguage) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StaffLanguage(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StaffLanguage", str)
	}
	return nil
}

func (e StaffLanguage) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Staff sort enums
type StaffSort string

const (
	StaffSortID             StaffSort = "ID"
	StaffSortIDDesc         StaffSort = "ID_DESC"
	StaffSortRole           StaffSort = "ROLE"
	StaffSortRoleDesc       StaffSort = "ROLE_DESC"
	StaffSortLanguage       StaffSort = "LANGUAGE"
	StaffSortLanguageDesc   StaffSort = "LANGUAGE_DESC"
	StaffSortSearchMatch    StaffSort = "SEARCH_MATCH"
	StaffSortFavourites     StaffSort = "FAVOURITES"
	StaffSortFavouritesDesc StaffSort = "FAVOURITES_DESC"
)

var AllStaffSort = []StaffSort{
	StaffSortID,
	StaffSortIDDesc,
	StaffSortRole,
	StaffSortRoleDesc,
	StaffSortLanguage,
	StaffSortLanguageDesc,
	StaffSortSearchMatch,
	StaffSortFavourites,
	StaffSortFavouritesDesc,
}

func (e StaffSort) IsValid() bool {
	switch e {
	case StaffSortID, StaffSortIDDesc, StaffSortRole, StaffSortRoleDesc, StaffSortLanguage, StaffSortLanguageDesc, StaffSortSearchMatch, StaffSortFavourites, StaffSortFavouritesDesc:
		return true
	}
	return false
}

func (e StaffSort) String() string {
	return string(e)
}

func (e *StaffSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StaffSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StaffSort", str)
	}
	return nil
}

func (e StaffSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Studio sort enums
type StudioSort string

const (
	StudioSortID             StudioSort = "ID"
	StudioSortIDDesc         StudioSort = "ID_DESC"
	StudioSortName           StudioSort = "NAME"
	StudioSortNameDesc       StudioSort = "NAME_DESC"
	StudioSortSearchMatch    StudioSort = "SEARCH_MATCH"
	StudioSortFavourites     StudioSort = "FAVOURITES"
	StudioSortFavouritesDesc StudioSort = "FAVOURITES_DESC"
)

var AllStudioSort = []StudioSort{
	StudioSortID,
	StudioSortIDDesc,
	StudioSortName,
	StudioSortNameDesc,
	StudioSortSearchMatch,
	StudioSortFavourites,
	StudioSortFavouritesDesc,
}

func (e StudioSort) IsValid() bool {
	switch e {
	case StudioSortID, StudioSortIDDesc, StudioSortName, StudioSortNameDesc, StudioSortSearchMatch, StudioSortFavourites, StudioSortFavouritesDesc:
		return true
	}
	return false
}

func (e StudioSort) String() string {
	return string(e)
}

func (e *StudioSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StudioSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StudioSort", str)
	}
	return nil
}

func (e StudioSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Submission sort enums
type SubmissionSort string

const (
	SubmissionSortID     SubmissionSort = "ID"
	SubmissionSortIDDesc SubmissionSort = "ID_DESC"
)

var AllSubmissionSort = []SubmissionSort{
	SubmissionSortID,
	SubmissionSortIDDesc,
}

func (e SubmissionSort) IsValid() bool {
	switch e {
	case SubmissionSortID, SubmissionSortIDDesc:
		return true
	}
	return false
}

func (e SubmissionSort) String() string {
	return string(e)
}

func (e *SubmissionSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubmissionSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubmissionSort", str)
	}
	return nil
}

func (e SubmissionSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Submission status
type SubmissionStatus string

const (
	SubmissionStatusPending           SubmissionStatus = "PENDING"
	SubmissionStatusRejected          SubmissionStatus = "REJECTED"
	SubmissionStatusPartiallyAccepted SubmissionStatus = "PARTIALLY_ACCEPTED"
	SubmissionStatusAccepted          SubmissionStatus = "ACCEPTED"
)

var AllSubmissionStatus = []SubmissionStatus{
	SubmissionStatusPending,
	SubmissionStatusRejected,
	SubmissionStatusPartiallyAccepted,
	SubmissionStatusAccepted,
}

func (e SubmissionStatus) IsValid() bool {
	switch e {
	case SubmissionStatusPending, SubmissionStatusRejected, SubmissionStatusPartiallyAccepted, SubmissionStatusAccepted:
		return true
	}
	return false
}

func (e SubmissionStatus) String() string {
	return string(e)
}

func (e *SubmissionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubmissionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubmissionStatus", str)
	}
	return nil
}

func (e SubmissionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Thread comments sort enums
type ThreadCommentSort string

const (
	ThreadCommentSortID     ThreadCommentSort = "ID"
	ThreadCommentSortIDDesc ThreadCommentSort = "ID_DESC"
)

var AllThreadCommentSort = []ThreadCommentSort{
	ThreadCommentSortID,
	ThreadCommentSortIDDesc,
}

func (e ThreadCommentSort) IsValid() bool {
	switch e {
	case ThreadCommentSortID, ThreadCommentSortIDDesc:
		return true
	}
	return false
}

func (e ThreadCommentSort) String() string {
	return string(e)
}

func (e *ThreadCommentSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ThreadCommentSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ThreadCommentSort", str)
	}
	return nil
}

func (e ThreadCommentSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Thread sort enums
type ThreadSort string

const (
	ThreadSortID             ThreadSort = "ID"
	ThreadSortIDDesc         ThreadSort = "ID_DESC"
	ThreadSortTitle          ThreadSort = "TITLE"
	ThreadSortTitleDesc      ThreadSort = "TITLE_DESC"
	ThreadSortCreatedAt      ThreadSort = "CREATED_AT"
	ThreadSortCreatedAtDesc  ThreadSort = "CREATED_AT_DESC"
	ThreadSortUpdatedAt      ThreadSort = "UPDATED_AT"
	ThreadSortUpdatedAtDesc  ThreadSort = "UPDATED_AT_DESC"
	ThreadSortRepliedAt      ThreadSort = "REPLIED_AT"
	ThreadSortRepliedAtDesc  ThreadSort = "REPLIED_AT_DESC"
	ThreadSortReplyCount     ThreadSort = "REPLY_COUNT"
	ThreadSortReplyCountDesc ThreadSort = "REPLY_COUNT_DESC"
	ThreadSortViewCount      ThreadSort = "VIEW_COUNT"
	ThreadSortViewCountDesc  ThreadSort = "VIEW_COUNT_DESC"
	ThreadSortIsSticky       ThreadSort = "IS_STICKY"
	ThreadSortSearchMatch    ThreadSort = "SEARCH_MATCH"
)

var AllThreadSort = []ThreadSort{
	ThreadSortID,
	ThreadSortIDDesc,
	ThreadSortTitle,
	ThreadSortTitleDesc,
	ThreadSortCreatedAt,
	ThreadSortCreatedAtDesc,
	ThreadSortUpdatedAt,
	ThreadSortUpdatedAtDesc,
	ThreadSortRepliedAt,
	ThreadSortRepliedAtDesc,
	ThreadSortReplyCount,
	ThreadSortReplyCountDesc,
	ThreadSortViewCount,
	ThreadSortViewCountDesc,
	ThreadSortIsSticky,
	ThreadSortSearchMatch,
}

func (e ThreadSort) IsValid() bool {
	switch e {
	case ThreadSortID, ThreadSortIDDesc, ThreadSortTitle, ThreadSortTitleDesc, ThreadSortCreatedAt, ThreadSortCreatedAtDesc, ThreadSortUpdatedAt, ThreadSortUpdatedAtDesc, ThreadSortRepliedAt, ThreadSortRepliedAtDesc, ThreadSortReplyCount, ThreadSortReplyCountDesc, ThreadSortViewCount, ThreadSortViewCountDesc, ThreadSortIsSticky, ThreadSortSearchMatch:
		return true
	}
	return false
}

func (e ThreadSort) String() string {
	return string(e)
}

func (e *ThreadSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ThreadSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ThreadSort", str)
	}
	return nil
}

func (e ThreadSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// User sort enums
type UserSort string

const (
	UserSortID               UserSort = "ID"
	UserSortIDDesc           UserSort = "ID_DESC"
	UserSortUsername         UserSort = "USERNAME"
	UserSortUsernameDesc     UserSort = "USERNAME_DESC"
	UserSortWatchedTime      UserSort = "WATCHED_TIME"
	UserSortWatchedTimeDesc  UserSort = "WATCHED_TIME_DESC"
	UserSortChaptersRead     UserSort = "CHAPTERS_READ"
	UserSortChaptersReadDesc UserSort = "CHAPTERS_READ_DESC"
	UserSortSearchMatch      UserSort = "SEARCH_MATCH"
)

var AllUserSort = []UserSort{
	UserSortID,
	UserSortIDDesc,
	UserSortUsername,
	UserSortUsernameDesc,
	UserSortWatchedTime,
	UserSortWatchedTimeDesc,
	UserSortChaptersRead,
	UserSortChaptersReadDesc,
	UserSortSearchMatch,
}

func (e UserSort) IsValid() bool {
	switch e {
	case UserSortID, UserSortIDDesc, UserSortUsername, UserSortUsernameDesc, UserSortWatchedTime, UserSortWatchedTimeDesc, UserSortChaptersRead, UserSortChaptersReadDesc, UserSortSearchMatch:
		return true
	}
	return false
}

func (e UserSort) String() string {
	return string(e)
}

func (e *UserSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserSort", str)
	}
	return nil
}

func (e UserSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// User statistics sort enum
type UserStatisticsSort string

const (
	UserStatisticsSortID            UserStatisticsSort = "ID"
	UserStatisticsSortIDDesc        UserStatisticsSort = "ID_DESC"
	UserStatisticsSortCount         UserStatisticsSort = "COUNT"
	UserStatisticsSortCountDesc     UserStatisticsSort = "COUNT_DESC"
	UserStatisticsSortProgress      UserStatisticsSort = "PROGRESS"
	UserStatisticsSortProgressDesc  UserStatisticsSort = "PROGRESS_DESC"
	UserStatisticsSortMeanScore     UserStatisticsSort = "MEAN_SCORE"
	UserStatisticsSortMeanScoreDesc UserStatisticsSort = "MEAN_SCORE_DESC"
)

var AllUserStatisticsSort = []UserStatisticsSort{
	UserStatisticsSortID,
	UserStatisticsSortIDDesc,
	UserStatisticsSortCount,
	UserStatisticsSortCountDesc,
	UserStatisticsSortProgress,
	UserStatisticsSortProgressDesc,
	UserStatisticsSortMeanScore,
	UserStatisticsSortMeanScoreDesc,
}

func (e UserStatisticsSort) IsValid() bool {
	switch e {
	case UserStatisticsSortID, UserStatisticsSortIDDesc, UserStatisticsSortCount, UserStatisticsSortCountDesc, UserStatisticsSortProgress, UserStatisticsSortProgressDesc, UserStatisticsSortMeanScore, UserStatisticsSortMeanScoreDesc:
		return true
	}
	return false
}

func (e UserStatisticsSort) String() string {
	return string(e)
}

func (e *UserStatisticsSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatisticsSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatisticsSort", str)
	}
	return nil
}

func (e UserStatisticsSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The language the user wants to see media titles in
type UserTitleLanguage string

const (
	// The romanization of the native language title
	UserTitleLanguageRomaji UserTitleLanguage = "ROMAJI"
	// The official english title
	UserTitleLanguageEnglish UserTitleLanguage = "ENGLISH"
	// Official title in it's native language
	UserTitleLanguageNative UserTitleLanguage = "NATIVE"
	// The romanization of the native language title, stylised by media creator
	UserTitleLanguageRomajiStylised UserTitleLanguage = "ROMAJI_STYLISED"
	// The official english title, stylised by media creator
	UserTitleLanguageEnglishStylised UserTitleLanguage = "ENGLISH_STYLISED"
	// Official title in it's native language, stylised by media creator
	UserTitleLanguageNativeStylised UserTitleLanguage = "NATIVE_STYLISED"
)

var AllUserTitleLanguage = []UserTitleLanguage{
	UserTitleLanguageRomaji,
	UserTitleLanguageEnglish,
	UserTitleLanguageNative,
	UserTitleLanguageRomajiStylised,
	UserTitleLanguageEnglishStylised,
	UserTitleLanguageNativeStylised,
}

func (e UserTitleLanguage) IsValid() bool {
	switch e {
	case UserTitleLanguageRomaji, UserTitleLanguageEnglish, UserTitleLanguageNative, UserTitleLanguageRomajiStylised, UserTitleLanguageEnglishStylised, UserTitleLanguageNativeStylised:
		return true
	}
	return false
}

func (e UserTitleLanguage) String() string {
	return string(e)
}

func (e *UserTitleLanguage) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserTitleLanguage(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserTitleLanguage", str)
	}
	return nil
}

func (e UserTitleLanguage) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
