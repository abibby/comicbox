
type Book {
    alternate_series: String!
    authors: [String!]!
    chapter: Float
    community_rating: Float
    cover: Page

    # the date a book was created
    created_at: Time!
    current_page: Int!
    date_released: Time
    file: String!
    genres: [String!]!

    # a unique id for the books
    id: ID!
    last_page_read: Int!
    pages: [Page!]!
    page_count: Int!
    rating: Float
    read: Boolean!
    series: String!
    story_arc: String!
    summary: String!
    title: String!
    updated_at: Time!
    volume: Int
    web: String!
}

input BookInput {
    chapter: Float
    summary: String
    series: String
    current_page: Int
    date_released: Time
    rating: Float
    alternate_series: String
    # reading_direction: String
    file: String
    authors: [String!]
    story_arc: String
    last_page_read: Int
    volume: Int
    community_rating: Float
    type: String
    web: String
    genres: [String!]
    title: String
    pages: [PageInput!]
}

type BookQuery {
    total: Int!
    results: [Book]!
}

type Page {
    file_number: Int!
    type: PageType!
    url: String!
}

input PageInput {
    file_number: Int!
    type: PageType!
}

enum PageType {
    FrontCover
    Story
    Deleted
}