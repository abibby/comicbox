schema {
    query: RootQuery
    # mutation: RootMutation
}

# The `Time` scalar type represents a DateTime. The DateTime is serialized as an RFC 3339 quoted string
scalar Time

# The `NumberRange` scalar represents a range of numbers with the format eg [1] matches the number 1
# and (1:10] is 1<x<=10 and [:10] is x<=10
scalar NumberRange

scalar Regex

type page_info {
    skip: Int
    take: Int
    total: Int
}

type RootMutation {
    # book(id: ID, book: BookInput!): Book
    # deleteBook(id: ID!): Book
    # series(name: String!, series: SeriesInput!): Series
    # user(id: ID, user: UserInput!): User
}

type RootQuery {
    book(id: ID!): Book
    books(
        skip: Int
        take: Int!
        
        search: String
        sort: String

        id: ID
        book_id: ID
        user_id: ID

        read: Boolean

        file: Regex
        web: Regex
        pages: Regex
        created_at: Regex
        series: Regex
        title: Regex
        last_page_read: Regex
        updated_at: Regex
        story_arc: Regex
        genres: Regex
        date_released: Regex
        current_page: Regex
        type: Regex
        alternate_series: Regex
        authors: Regex
        summary: Regex

        page_count: NumberRange
        community_rating: NumberRange
        chapter: NumberRange
        rating: NumberRange
        volume: NumberRange
    ): BookQuery

    # me: User
    # serie(name: String!): Series
    # series(total: String
    #     list: List
    #     search: String
    #     sort: String
    #     take: Int!
    #     name: String
    #     read: String
    #     user_id: ID
    #     tags: String
    #     skip: Int): SeriesQuery
    # users(sort: String
    #     name: String
    #     username: String
    #     password: String
    #     skip: Int
    #     id: ID
    #     created_at: String
    #     updated_at: String
    #     search: String
    #     take: Int!
    #     me: Boolean): UserQuery
}
